// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bid_info.proto

#ifndef PROTOBUF_bid_5finfo_2eproto__INCLUDED
#define PROTOBUF_bid_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace pxene {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bid_5finfo_2eproto();
void protobuf_AssignDesc_bid_5finfo_2eproto();
void protobuf_ShutdownFile_bid_5finfo_2eproto();

class BidReqMessage;
class BidReqMessage_Impression;
class BidReqMessage_Impression_Banner;
class BidReqMessage_Impression_Video;
class BidReqMessage_Impression_NativeAd;
class BidReqMessage_Impression_NativeAd_AssetInfo;
class BidReqMessage_Impression_Ext;
class BidReqMessage_App;
class BidReqMessage_Device;
class BidReqMessage_Device_DeviceIdPair;
class BidReqMessage_UserInfo;

// ===================================================================

class BidReqMessage_Impression_Banner : public ::google::protobuf::Message {
 public:
  BidReqMessage_Impression_Banner();
  virtual ~BidReqMessage_Impression_Banner();

  BidReqMessage_Impression_Banner(const BidReqMessage_Impression_Banner& from);

  inline BidReqMessage_Impression_Banner& operator=(const BidReqMessage_Impression_Banner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage_Impression_Banner& default_instance();

  void Swap(BidReqMessage_Impression_Banner* other);

  // implements Message ----------------------------------------------

  BidReqMessage_Impression_Banner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage_Impression_Banner& from);
  void MergeFrom(const BidReqMessage_Impression_Banner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 w = 1;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 1;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 2;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 2;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // repeated int32 btype = 3;
  inline int btype_size() const;
  inline void clear_btype();
  static const int kBtypeFieldNumber = 3;
  inline ::google::protobuf::int32 btype(int index) const;
  inline void set_btype(int index, ::google::protobuf::int32 value);
  inline void add_btype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      btype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_btype();

  // repeated int32 battr = 4;
  inline int battr_size() const;
  inline void clear_battr();
  static const int kBattrFieldNumber = 4;
  inline ::google::protobuf::int32 battr(int index) const;
  inline void set_battr(int index, ::google::protobuf::int32 value);
  inline void add_battr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      battr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_battr();

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage.Impression.Banner)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > btype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > battr_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage_Impression_Banner* default_instance_;
};
// -------------------------------------------------------------------

class BidReqMessage_Impression_Video : public ::google::protobuf::Message {
 public:
  BidReqMessage_Impression_Video();
  virtual ~BidReqMessage_Impression_Video();

  BidReqMessage_Impression_Video(const BidReqMessage_Impression_Video& from);

  inline BidReqMessage_Impression_Video& operator=(const BidReqMessage_Impression_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage_Impression_Video& default_instance();

  void Swap(BidReqMessage_Impression_Video* other);

  // implements Message ----------------------------------------------

  BidReqMessage_Impression_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage_Impression_Video& from);
  void MergeFrom(const BidReqMessage_Impression_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 w = 1;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 1;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 2;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 2;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // optional int32 display = 3;
  inline bool has_display() const;
  inline void clear_display();
  static const int kDisplayFieldNumber = 3;
  inline ::google::protobuf::int32 display() const;
  inline void set_display(::google::protobuf::int32 value);

  // optional int32 minduration = 4;
  inline bool has_minduration() const;
  inline void clear_minduration();
  static const int kMindurationFieldNumber = 4;
  inline ::google::protobuf::int32 minduration() const;
  inline void set_minduration(::google::protobuf::int32 value);

  // optional int32 maxduration = 5;
  inline bool has_maxduration() const;
  inline void clear_maxduration();
  static const int kMaxdurationFieldNumber = 5;
  inline ::google::protobuf::int32 maxduration() const;
  inline void set_maxduration(::google::protobuf::int32 value);

  // repeated int32 mimes = 6;
  inline int mimes_size() const;
  inline void clear_mimes();
  static const int kMimesFieldNumber = 6;
  inline ::google::protobuf::int32 mimes(int index) const;
  inline void set_mimes(int index, ::google::protobuf::int32 value);
  inline void add_mimes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mimes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mimes();

  // repeated int32 battr = 7;
  inline int battr_size() const;
  inline void clear_battr();
  static const int kBattrFieldNumber = 7;
  inline ::google::protobuf::int32 battr(int index) const;
  inline void set_battr(int index, ::google::protobuf::int32 value);
  inline void add_battr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      battr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_battr();

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage.Impression.Video)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_minduration();
  inline void clear_has_minduration();
  inline void set_has_maxduration();
  inline void clear_has_maxduration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 minduration_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mimes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > battr_;
  ::google::protobuf::int32 maxduration_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage_Impression_Video* default_instance_;
};
// -------------------------------------------------------------------

class BidReqMessage_Impression_NativeAd_AssetInfo : public ::google::protobuf::Message {
 public:
  BidReqMessage_Impression_NativeAd_AssetInfo();
  virtual ~BidReqMessage_Impression_NativeAd_AssetInfo();

  BidReqMessage_Impression_NativeAd_AssetInfo(const BidReqMessage_Impression_NativeAd_AssetInfo& from);

  inline BidReqMessage_Impression_NativeAd_AssetInfo& operator=(const BidReqMessage_Impression_NativeAd_AssetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage_Impression_NativeAd_AssetInfo& default_instance();

  void Swap(BidReqMessage_Impression_NativeAd_AssetInfo* other);

  // implements Message ----------------------------------------------

  BidReqMessage_Impression_NativeAd_AssetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage_Impression_NativeAd_AssetInfo& from);
  void MergeFrom(const BidReqMessage_Impression_NativeAd_AssetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required int32 requiredFlag = 2;
  inline bool has_requiredflag() const;
  inline void clear_requiredflag();
  static const int kRequiredFlagFieldNumber = 2;
  inline ::google::protobuf::int32 requiredflag() const;
  inline void set_requiredflag(::google::protobuf::int32 value);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 titleLen = 4;
  inline bool has_titlelen() const;
  inline void clear_titlelen();
  static const int kTitleLenFieldNumber = 4;
  inline ::google::protobuf::int32 titlelen() const;
  inline void set_titlelen(::google::protobuf::int32 value);

  // optional int32 imageType = 5;
  inline bool has_imagetype() const;
  inline void clear_imagetype();
  static const int kImageTypeFieldNumber = 5;
  inline ::google::protobuf::int32 imagetype() const;
  inline void set_imagetype(::google::protobuf::int32 value);

  // optional int32 imageW = 6;
  inline bool has_imagew() const;
  inline void clear_imagew();
  static const int kImageWFieldNumber = 6;
  inline ::google::protobuf::int32 imagew() const;
  inline void set_imagew(::google::protobuf::int32 value);

  // optional int32 imageWMin = 7;
  inline bool has_imagewmin() const;
  inline void clear_imagewmin();
  static const int kImageWMinFieldNumber = 7;
  inline ::google::protobuf::int32 imagewmin() const;
  inline void set_imagewmin(::google::protobuf::int32 value);

  // optional int32 imageH = 8;
  inline bool has_imageh() const;
  inline void clear_imageh();
  static const int kImageHFieldNumber = 8;
  inline ::google::protobuf::int32 imageh() const;
  inline void set_imageh(::google::protobuf::int32 value);

  // optional int32 imageHMin = 9;
  inline bool has_imagehmin() const;
  inline void clear_imagehmin();
  static const int kImageHMinFieldNumber = 9;
  inline ::google::protobuf::int32 imagehmin() const;
  inline void set_imagehmin(::google::protobuf::int32 value);

  // repeated int32 imageMimes = 10;
  inline int imagemimes_size() const;
  inline void clear_imagemimes();
  static const int kImageMimesFieldNumber = 10;
  inline ::google::protobuf::int32 imagemimes(int index) const;
  inline void set_imagemimes(int index, ::google::protobuf::int32 value);
  inline void add_imagemimes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      imagemimes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_imagemimes();

  // optional int32 dataType = 11;
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDataTypeFieldNumber = 11;
  inline ::google::protobuf::int32 datatype() const;
  inline void set_datatype(::google::protobuf::int32 value);

  // optional int32 dataLen = 12;
  inline bool has_datalen() const;
  inline void clear_datalen();
  static const int kDataLenFieldNumber = 12;
  inline ::google::protobuf::int32 datalen() const;
  inline void set_datalen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_requiredflag();
  inline void clear_has_requiredflag();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_titlelen();
  inline void clear_has_titlelen();
  inline void set_has_imagetype();
  inline void clear_has_imagetype();
  inline void set_has_imagew();
  inline void clear_has_imagew();
  inline void set_has_imagewmin();
  inline void clear_has_imagewmin();
  inline void set_has_imageh();
  inline void clear_has_imageh();
  inline void set_has_imagehmin();
  inline void clear_has_imagehmin();
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_datalen();
  inline void clear_has_datalen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 requiredflag_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 titlelen_;
  ::google::protobuf::int32 imagetype_;
  ::google::protobuf::int32 imagew_;
  ::google::protobuf::int32 imagewmin_;
  ::google::protobuf::int32 imageh_;
  ::google::protobuf::int32 imagehmin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > imagemimes_;
  ::google::protobuf::int32 datatype_;
  ::google::protobuf::int32 datalen_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage_Impression_NativeAd_AssetInfo* default_instance_;
};
// -------------------------------------------------------------------

class BidReqMessage_Impression_NativeAd : public ::google::protobuf::Message {
 public:
  BidReqMessage_Impression_NativeAd();
  virtual ~BidReqMessage_Impression_NativeAd();

  BidReqMessage_Impression_NativeAd(const BidReqMessage_Impression_NativeAd& from);

  inline BidReqMessage_Impression_NativeAd& operator=(const BidReqMessage_Impression_NativeAd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage_Impression_NativeAd& default_instance();

  void Swap(BidReqMessage_Impression_NativeAd* other);

  // implements Message ----------------------------------------------

  BidReqMessage_Impression_NativeAd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage_Impression_NativeAd& from);
  void MergeFrom(const BidReqMessage_Impression_NativeAd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidReqMessage_Impression_NativeAd_AssetInfo AssetInfo;

  // accessors -------------------------------------------------------

  // optional int32 layout = 1;
  inline bool has_layout() const;
  inline void clear_layout();
  static const int kLayoutFieldNumber = 1;
  inline ::google::protobuf::int32 layout() const;
  inline void set_layout(::google::protobuf::int32 value);

  // optional int32 plcmtcnt = 2;
  inline bool has_plcmtcnt() const;
  inline void clear_plcmtcnt();
  static const int kPlcmtcntFieldNumber = 2;
  inline ::google::protobuf::int32 plcmtcnt() const;
  inline void set_plcmtcnt(::google::protobuf::int32 value);

  // repeated .com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo asset = 3;
  inline int asset_size() const;
  inline void clear_asset();
  static const int kAssetFieldNumber = 3;
  inline const ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo& asset(int index) const;
  inline ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo* mutable_asset(int index);
  inline ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo* add_asset();
  inline const ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo >&
      asset() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo >*
      mutable_asset();

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage.Impression.NativeAd)
 private:
  inline void set_has_layout();
  inline void clear_has_layout();
  inline void set_has_plcmtcnt();
  inline void clear_has_plcmtcnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 layout_;
  ::google::protobuf::int32 plcmtcnt_;
  ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo > asset_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage_Impression_NativeAd* default_instance_;
};
// -------------------------------------------------------------------

class BidReqMessage_Impression_Ext : public ::google::protobuf::Message {
 public:
  BidReqMessage_Impression_Ext();
  virtual ~BidReqMessage_Impression_Ext();

  BidReqMessage_Impression_Ext(const BidReqMessage_Impression_Ext& from);

  inline BidReqMessage_Impression_Ext& operator=(const BidReqMessage_Impression_Ext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage_Impression_Ext& default_instance();

  void Swap(BidReqMessage_Impression_Ext* other);

  // implements Message ----------------------------------------------

  BidReqMessage_Impression_Ext* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage_Impression_Ext& from);
  void MergeFrom(const BidReqMessage_Impression_Ext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 instl = 1;
  inline bool has_instl() const;
  inline void clear_instl();
  static const int kInstlFieldNumber = 1;
  inline ::google::protobuf::int32 instl() const;
  inline void set_instl(::google::protobuf::int32 value);

  // optional int32 splash = 2;
  inline bool has_splash() const;
  inline void clear_splash();
  static const int kSplashFieldNumber = 2;
  inline ::google::protobuf::int32 splash() const;
  inline void set_splash(::google::protobuf::int32 value);

  // optional int32 advid = 3;
  inline bool has_advid() const;
  inline void clear_advid();
  static const int kAdvidFieldNumber = 3;
  inline ::google::protobuf::int32 advid() const;
  inline void set_advid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage.Impression.Ext)
 private:
  inline void set_has_instl();
  inline void clear_has_instl();
  inline void set_has_splash();
  inline void clear_has_splash();
  inline void set_has_advid();
  inline void clear_has_advid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 instl_;
  ::google::protobuf::int32 splash_;
  ::google::protobuf::int32 advid_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage_Impression_Ext* default_instance_;
};
// -------------------------------------------------------------------

class BidReqMessage_Impression : public ::google::protobuf::Message {
 public:
  BidReqMessage_Impression();
  virtual ~BidReqMessage_Impression();

  BidReqMessage_Impression(const BidReqMessage_Impression& from);

  inline BidReqMessage_Impression& operator=(const BidReqMessage_Impression& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage_Impression& default_instance();

  void Swap(BidReqMessage_Impression* other);

  // implements Message ----------------------------------------------

  BidReqMessage_Impression* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage_Impression& from);
  void MergeFrom(const BidReqMessage_Impression& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidReqMessage_Impression_Banner Banner;
  typedef BidReqMessage_Impression_Video Video;
  typedef BidReqMessage_Impression_NativeAd NativeAd;
  typedef BidReqMessage_Impression_Ext Ext;

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bool doBid = 3;
  inline bool has_dobid() const;
  inline void clear_dobid();
  static const int kDoBidFieldNumber = 3;
  inline bool dobid() const;
  inline void set_dobid(bool value);

  // optional .com.pxene.proto.BidReqMessage.Impression.Banner banner = 4;
  inline bool has_banner() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 4;
  inline const ::com::pxene::proto::BidReqMessage_Impression_Banner& banner() const;
  inline ::com::pxene::proto::BidReqMessage_Impression_Banner* mutable_banner();
  inline ::com::pxene::proto::BidReqMessage_Impression_Banner* release_banner();
  inline void set_allocated_banner(::com::pxene::proto::BidReqMessage_Impression_Banner* banner);

  // optional .com.pxene.proto.BidReqMessage.Impression.Video video = 5;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 5;
  inline const ::com::pxene::proto::BidReqMessage_Impression_Video& video() const;
  inline ::com::pxene::proto::BidReqMessage_Impression_Video* mutable_video();
  inline ::com::pxene::proto::BidReqMessage_Impression_Video* release_video();
  inline void set_allocated_video(::com::pxene::proto::BidReqMessage_Impression_Video* video);

  // optional .com.pxene.proto.BidReqMessage.Impression.NativeAd nativeAd = 6;
  inline bool has_nativead() const;
  inline void clear_nativead();
  static const int kNativeAdFieldNumber = 6;
  inline const ::com::pxene::proto::BidReqMessage_Impression_NativeAd& nativead() const;
  inline ::com::pxene::proto::BidReqMessage_Impression_NativeAd* mutable_nativead();
  inline ::com::pxene::proto::BidReqMessage_Impression_NativeAd* release_nativead();
  inline void set_allocated_nativead(::com::pxene::proto::BidReqMessage_Impression_NativeAd* nativead);

  // optional int32 bidFloor = 7;
  inline bool has_bidfloor() const;
  inline void clear_bidfloor();
  static const int kBidFloorFieldNumber = 7;
  inline ::google::protobuf::int32 bidfloor() const;
  inline void set_bidfloor(::google::protobuf::int32 value);

  // optional string bidFloorCur = 8;
  inline bool has_bidfloorcur() const;
  inline void clear_bidfloorcur();
  static const int kBidFloorCurFieldNumber = 8;
  inline const ::std::string& bidfloorcur() const;
  inline void set_bidfloorcur(const ::std::string& value);
  inline void set_bidfloorcur(const char* value);
  inline void set_bidfloorcur(const char* value, size_t size);
  inline ::std::string* mutable_bidfloorcur();
  inline ::std::string* release_bidfloorcur();
  inline void set_allocated_bidfloorcur(::std::string* bidfloorcur);

  // optional int32 adPos = 9;
  inline bool has_adpos() const;
  inline void clear_adpos();
  static const int kAdPosFieldNumber = 9;
  inline ::google::protobuf::int32 adpos() const;
  inline void set_adpos(::google::protobuf::int32 value);

  // optional .com.pxene.proto.BidReqMessage.Impression.Ext ext = 10;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 10;
  inline const ::com::pxene::proto::BidReqMessage_Impression_Ext& ext() const;
  inline ::com::pxene::proto::BidReqMessage_Impression_Ext* mutable_ext();
  inline ::com::pxene::proto::BidReqMessage_Impression_Ext* release_ext();
  inline void set_allocated_ext(::com::pxene::proto::BidReqMessage_Impression_Ext* ext);

  // optional int32 selMapid = 11;
  inline bool has_selmapid() const;
  inline void clear_selmapid();
  static const int kSelMapidFieldNumber = 11;
  inline ::google::protobuf::int32 selmapid() const;
  inline void set_selmapid(::google::protobuf::int32 value);

  // optional int32 price = 12;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 12;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional string track_url_par = 13;
  inline bool has_track_url_par() const;
  inline void clear_track_url_par();
  static const int kTrackUrlParFieldNumber = 13;
  inline const ::std::string& track_url_par() const;
  inline void set_track_url_par(const ::std::string& value);
  inline void set_track_url_par(const char* value);
  inline void set_track_url_par(const char* value, size_t size);
  inline ::std::string* mutable_track_url_par();
  inline ::std::string* release_track_url_par();
  inline void set_allocated_track_url_par(::std::string* track_url_par);

  // optional string curl = 14;
  inline bool has_curl() const;
  inline void clear_curl();
  static const int kCurlFieldNumber = 14;
  inline const ::std::string& curl() const;
  inline void set_curl(const ::std::string& value);
  inline void set_curl(const char* value);
  inline void set_curl(const char* value, size_t size);
  inline ::std::string* mutable_curl();
  inline ::std::string* release_curl();
  inline void set_allocated_curl(::std::string* curl);

  // optional string monitorcode = 15;
  inline bool has_monitorcode() const;
  inline void clear_monitorcode();
  static const int kMonitorcodeFieldNumber = 15;
  inline const ::std::string& monitorcode() const;
  inline void set_monitorcode(const ::std::string& value);
  inline void set_monitorcode(const char* value);
  inline void set_monitorcode(const char* value, size_t size);
  inline ::std::string* mutable_monitorcode();
  inline ::std::string* release_monitorcode();
  inline void set_allocated_monitorcode(::std::string* monitorcode);

  // repeated string imonitorurl = 16;
  inline int imonitorurl_size() const;
  inline void clear_imonitorurl();
  static const int kImonitorurlFieldNumber = 16;
  inline const ::std::string& imonitorurl(int index) const;
  inline ::std::string* mutable_imonitorurl(int index);
  inline void set_imonitorurl(int index, const ::std::string& value);
  inline void set_imonitorurl(int index, const char* value);
  inline void set_imonitorurl(int index, const char* value, size_t size);
  inline ::std::string* add_imonitorurl();
  inline void add_imonitorurl(const ::std::string& value);
  inline void add_imonitorurl(const char* value);
  inline void add_imonitorurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& imonitorurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_imonitorurl();

  // repeated string cmonitorurl = 17;
  inline int cmonitorurl_size() const;
  inline void clear_cmonitorurl();
  static const int kCmonitorurlFieldNumber = 17;
  inline const ::std::string& cmonitorurl(int index) const;
  inline ::std::string* mutable_cmonitorurl(int index);
  inline void set_cmonitorurl(int index, const ::std::string& value);
  inline void set_cmonitorurl(int index, const char* value);
  inline void set_cmonitorurl(int index, const char* value, size_t size);
  inline ::std::string* add_cmonitorurl();
  inline void add_cmonitorurl(const ::std::string& value);
  inline void add_cmonitorurl(const char* value);
  inline void add_cmonitorurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cmonitorurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cmonitorurl();

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage.Impression)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dobid();
  inline void clear_has_dobid();
  inline void set_has_banner();
  inline void clear_has_banner();
  inline void set_has_video();
  inline void clear_has_video();
  inline void set_has_nativead();
  inline void clear_has_nativead();
  inline void set_has_bidfloor();
  inline void clear_has_bidfloor();
  inline void set_has_bidfloorcur();
  inline void clear_has_bidfloorcur();
  inline void set_has_adpos();
  inline void clear_has_adpos();
  inline void set_has_ext();
  inline void clear_has_ext();
  inline void set_has_selmapid();
  inline void clear_has_selmapid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_track_url_par();
  inline void clear_has_track_url_par();
  inline void set_has_curl();
  inline void clear_has_curl();
  inline void set_has_monitorcode();
  inline void clear_has_monitorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 type_;
  bool dobid_;
  ::com::pxene::proto::BidReqMessage_Impression_Banner* banner_;
  ::com::pxene::proto::BidReqMessage_Impression_Video* video_;
  ::com::pxene::proto::BidReqMessage_Impression_NativeAd* nativead_;
  ::std::string* bidfloorcur_;
  ::google::protobuf::int32 bidfloor_;
  ::google::protobuf::int32 adpos_;
  ::com::pxene::proto::BidReqMessage_Impression_Ext* ext_;
  ::google::protobuf::int32 selmapid_;
  ::google::protobuf::int32 price_;
  ::std::string* track_url_par_;
  ::std::string* curl_;
  ::std::string* monitorcode_;
  ::google::protobuf::RepeatedPtrField< ::std::string> imonitorurl_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cmonitorurl_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage_Impression* default_instance_;
};
// -------------------------------------------------------------------

class BidReqMessage_App : public ::google::protobuf::Message {
 public:
  BidReqMessage_App();
  virtual ~BidReqMessage_App();

  BidReqMessage_App(const BidReqMessage_App& from);

  inline BidReqMessage_App& operator=(const BidReqMessage_App& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage_App& default_instance();

  void Swap(BidReqMessage_App* other);

  // implements Message ----------------------------------------------

  BidReqMessage_App* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage_App& from);
  void MergeFrom(const BidReqMessage_App& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated int32 cat = 3;
  inline int cat_size() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 3;
  inline ::google::protobuf::int32 cat(int index) const;
  inline void set_cat(int index, ::google::protobuf::int32 value);
  inline void add_cat(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cat() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cat();

  // optional string bundle = 4;
  inline bool has_bundle() const;
  inline void clear_bundle();
  static const int kBundleFieldNumber = 4;
  inline const ::std::string& bundle() const;
  inline void set_bundle(const ::std::string& value);
  inline void set_bundle(const char* value);
  inline void set_bundle(const char* value, size_t size);
  inline ::std::string* mutable_bundle();
  inline ::std::string* release_bundle();
  inline void set_allocated_bundle(::std::string* bundle);

  // optional string storeurl = 5;
  inline bool has_storeurl() const;
  inline void clear_storeurl();
  static const int kStoreurlFieldNumber = 5;
  inline const ::std::string& storeurl() const;
  inline void set_storeurl(const ::std::string& value);
  inline void set_storeurl(const char* value);
  inline void set_storeurl(const char* value, size_t size);
  inline ::std::string* mutable_storeurl();
  inline ::std::string* release_storeurl();
  inline void set_allocated_storeurl(::std::string* storeurl);

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage.App)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bundle();
  inline void clear_has_bundle();
  inline void set_has_storeurl();
  inline void clear_has_storeurl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cat_;
  ::std::string* bundle_;
  ::std::string* storeurl_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage_App* default_instance_;
};
// -------------------------------------------------------------------

class BidReqMessage_Device_DeviceIdPair : public ::google::protobuf::Message {
 public:
  BidReqMessage_Device_DeviceIdPair();
  virtual ~BidReqMessage_Device_DeviceIdPair();

  BidReqMessage_Device_DeviceIdPair(const BidReqMessage_Device_DeviceIdPair& from);

  inline BidReqMessage_Device_DeviceIdPair& operator=(const BidReqMessage_Device_DeviceIdPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage_Device_DeviceIdPair& default_instance();

  void Swap(BidReqMessage_Device_DeviceIdPair* other);

  // implements Message ----------------------------------------------

  BidReqMessage_Device_DeviceIdPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage_Device_DeviceIdPair& from);
  void MergeFrom(const BidReqMessage_Device_DeviceIdPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage_Device_DeviceIdPair* default_instance_;
};
// -------------------------------------------------------------------

class BidReqMessage_Device : public ::google::protobuf::Message {
 public:
  BidReqMessage_Device();
  virtual ~BidReqMessage_Device();

  BidReqMessage_Device(const BidReqMessage_Device& from);

  inline BidReqMessage_Device& operator=(const BidReqMessage_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage_Device& default_instance();

  void Swap(BidReqMessage_Device* other);

  // implements Message ----------------------------------------------

  BidReqMessage_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage_Device& from);
  void MergeFrom(const BidReqMessage_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidReqMessage_Device_DeviceIdPair DeviceIdPair;

  // accessors -------------------------------------------------------

  // repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dids = 1;
  inline int dids_size() const;
  inline void clear_dids();
  static const int kDidsFieldNumber = 1;
  inline const ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair& dids(int index) const;
  inline ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair* mutable_dids(int index);
  inline ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair* add_dids();
  inline const ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair >&
      dids() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair >*
      mutable_dids();

  // repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dpids = 2;
  inline int dpids_size() const;
  inline void clear_dpids();
  static const int kDpidsFieldNumber = 2;
  inline const ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair& dpids(int index) const;
  inline ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair* mutable_dpids(int index);
  inline ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair* add_dpids();
  inline const ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair >&
      dpids() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair >*
      mutable_dpids();

  // optional string ua = 3;
  inline bool has_ua() const;
  inline void clear_ua();
  static const int kUaFieldNumber = 3;
  inline const ::std::string& ua() const;
  inline void set_ua(const ::std::string& value);
  inline void set_ua(const char* value);
  inline void set_ua(const char* value, size_t size);
  inline ::std::string* mutable_ua();
  inline ::std::string* release_ua();
  inline void set_allocated_ua(::std::string* ua);

  // optional int32 location = 4;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 4;
  inline ::google::protobuf::int32 location() const;
  inline void set_location(::google::protobuf::int32 value);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional double geoLat = 6;
  inline bool has_geolat() const;
  inline void clear_geolat();
  static const int kGeoLatFieldNumber = 6;
  inline double geolat() const;
  inline void set_geolat(double value);

  // optional double geoLon = 7;
  inline bool has_geolon() const;
  inline void clear_geolon();
  static const int kGeoLonFieldNumber = 7;
  inline double geolon() const;
  inline void set_geolon(double value);

  // optional int32 carrier = 8;
  inline bool has_carrier() const;
  inline void clear_carrier();
  static const int kCarrierFieldNumber = 8;
  inline ::google::protobuf::int32 carrier() const;
  inline void set_carrier(::google::protobuf::int32 value);

  // optional int32 make = 9;
  inline bool has_make() const;
  inline void clear_make();
  static const int kMakeFieldNumber = 9;
  inline ::google::protobuf::int32 make() const;
  inline void set_make(::google::protobuf::int32 value);

  // optional string makestr = 10;
  inline bool has_makestr() const;
  inline void clear_makestr();
  static const int kMakestrFieldNumber = 10;
  inline const ::std::string& makestr() const;
  inline void set_makestr(const ::std::string& value);
  inline void set_makestr(const char* value);
  inline void set_makestr(const char* value, size_t size);
  inline ::std::string* mutable_makestr();
  inline ::std::string* release_makestr();
  inline void set_allocated_makestr(::std::string* makestr);

  // optional string model = 11;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 11;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional int32 os = 12;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 12;
  inline ::google::protobuf::int32 os() const;
  inline void set_os(::google::protobuf::int32 value);

  // optional string osv = 13;
  inline bool has_osv() const;
  inline void clear_osv();
  static const int kOsvFieldNumber = 13;
  inline const ::std::string& osv() const;
  inline void set_osv(const ::std::string& value);
  inline void set_osv(const char* value);
  inline void set_osv(const char* value, size_t size);
  inline ::std::string* mutable_osv();
  inline ::std::string* release_osv();
  inline void set_allocated_osv(::std::string* osv);

  // optional int32 connectionType = 14;
  inline bool has_connectiontype() const;
  inline void clear_connectiontype();
  static const int kConnectionTypeFieldNumber = 14;
  inline ::google::protobuf::int32 connectiontype() const;
  inline void set_connectiontype(::google::protobuf::int32 value);

  // optional int32 deviceType = 15;
  inline bool has_devicetype() const;
  inline void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 15;
  inline ::google::protobuf::int32 devicetype() const;
  inline void set_devicetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage.Device)
 private:
  inline void set_has_ua();
  inline void clear_has_ua();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_geolat();
  inline void clear_has_geolat();
  inline void set_has_geolon();
  inline void clear_has_geolon();
  inline void set_has_carrier();
  inline void clear_has_carrier();
  inline void set_has_make();
  inline void clear_has_make();
  inline void set_has_makestr();
  inline void clear_has_makestr();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_osv();
  inline void clear_has_osv();
  inline void set_has_connectiontype();
  inline void clear_has_connectiontype();
  inline void set_has_devicetype();
  inline void clear_has_devicetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair > dids_;
  ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair > dpids_;
  ::std::string* ua_;
  ::std::string* ip_;
  double geolat_;
  ::google::protobuf::int32 location_;
  ::google::protobuf::int32 carrier_;
  double geolon_;
  ::std::string* makestr_;
  ::google::protobuf::int32 make_;
  ::google::protobuf::int32 os_;
  ::std::string* model_;
  ::std::string* osv_;
  ::google::protobuf::int32 connectiontype_;
  ::google::protobuf::int32 devicetype_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage_Device* default_instance_;
};
// -------------------------------------------------------------------

class BidReqMessage_UserInfo : public ::google::protobuf::Message {
 public:
  BidReqMessage_UserInfo();
  virtual ~BidReqMessage_UserInfo();

  BidReqMessage_UserInfo(const BidReqMessage_UserInfo& from);

  inline BidReqMessage_UserInfo& operator=(const BidReqMessage_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage_UserInfo& default_instance();

  void Swap(BidReqMessage_UserInfo* other);

  // implements Message ----------------------------------------------

  BidReqMessage_UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage_UserInfo& from);
  void MergeFrom(const BidReqMessage_UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 gender = 2;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 2;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);

  // optional int32 yob = 3;
  inline bool has_yob() const;
  inline void clear_yob();
  static const int kYobFieldNumber = 3;
  inline ::google::protobuf::int32 yob() const;
  inline void set_yob(::google::protobuf::int32 value);

  // optional string keywords = 4;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 4;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  inline void set_allocated_keywords(::std::string* keywords);

  // optional double geoLat = 5;
  inline bool has_geolat() const;
  inline void clear_geolat();
  static const int kGeoLatFieldNumber = 5;
  inline double geolat() const;
  inline void set_geolat(double value);

  // optional double geoLon = 6;
  inline bool has_geolon() const;
  inline void clear_geolon();
  static const int kGeoLonFieldNumber = 6;
  inline double geolon() const;
  inline void set_geolon(double value);

  // optional string searchkey = 7;
  inline bool has_searchkey() const;
  inline void clear_searchkey();
  static const int kSearchkeyFieldNumber = 7;
  inline const ::std::string& searchkey() const;
  inline void set_searchkey(const ::std::string& value);
  inline void set_searchkey(const char* value);
  inline void set_searchkey(const char* value, size_t size);
  inline ::std::string* mutable_searchkey();
  inline ::std::string* release_searchkey();
  inline void set_allocated_searchkey(::std::string* searchkey);

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage.UserInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_yob();
  inline void clear_has_yob();
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_geolat();
  inline void clear_has_geolat();
  inline void set_has_geolon();
  inline void clear_has_geolon();
  inline void set_has_searchkey();
  inline void clear_has_searchkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::int32 yob_;
  ::std::string* keywords_;
  double geolat_;
  double geolon_;
  ::std::string* searchkey_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage_UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class BidReqMessage : public ::google::protobuf::Message {
 public:
  BidReqMessage();
  virtual ~BidReqMessage();

  BidReqMessage(const BidReqMessage& from);

  inline BidReqMessage& operator=(const BidReqMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidReqMessage& default_instance();

  void Swap(BidReqMessage* other);

  // implements Message ----------------------------------------------

  BidReqMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidReqMessage& from);
  void MergeFrom(const BidReqMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidReqMessage_Impression Impression;
  typedef BidReqMessage_App App;
  typedef BidReqMessage_Device Device;
  typedef BidReqMessage_UserInfo UserInfo;

  // accessors -------------------------------------------------------

  // optional string version = 1 [default = "1.0.7"];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string requestId = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIdFieldNumber = 2;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int32 adxid = 4;
  inline bool has_adxid() const;
  inline void clear_adxid();
  static const int kAdxidFieldNumber = 4;
  inline ::google::protobuf::int32 adxid() const;
  inline void set_adxid(::google::protobuf::int32 value);

  // repeated .com.pxene.proto.BidReqMessage.Impression imp = 5;
  inline int imp_size() const;
  inline void clear_imp();
  static const int kImpFieldNumber = 5;
  inline const ::com::pxene::proto::BidReqMessage_Impression& imp(int index) const;
  inline ::com::pxene::proto::BidReqMessage_Impression* mutable_imp(int index);
  inline ::com::pxene::proto::BidReqMessage_Impression* add_imp();
  inline const ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Impression >&
      imp() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Impression >*
      mutable_imp();

  // optional .com.pxene.proto.BidReqMessage.App app = 6;
  inline bool has_app() const;
  inline void clear_app();
  static const int kAppFieldNumber = 6;
  inline const ::com::pxene::proto::BidReqMessage_App& app() const;
  inline ::com::pxene::proto::BidReqMessage_App* mutable_app();
  inline ::com::pxene::proto::BidReqMessage_App* release_app();
  inline void set_allocated_app(::com::pxene::proto::BidReqMessage_App* app);

  // optional .com.pxene.proto.BidReqMessage.Device device = 7;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 7;
  inline const ::com::pxene::proto::BidReqMessage_Device& device() const;
  inline ::com::pxene::proto::BidReqMessage_Device* mutable_device();
  inline ::com::pxene::proto::BidReqMessage_Device* release_device();
  inline void set_allocated_device(::com::pxene::proto::BidReqMessage_Device* device);

  // optional .com.pxene.proto.BidReqMessage.UserInfo userInfo = 8;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 8;
  inline const ::com::pxene::proto::BidReqMessage_UserInfo& userinfo() const;
  inline ::com::pxene::proto::BidReqMessage_UserInfo* mutable_userinfo();
  inline ::com::pxene::proto::BidReqMessage_UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::com::pxene::proto::BidReqMessage_UserInfo* userinfo);

  // repeated int32 bcat = 9;
  inline int bcat_size() const;
  inline void clear_bcat();
  static const int kBcatFieldNumber = 9;
  inline ::google::protobuf::int32 bcat(int index) const;
  inline void set_bcat(int index, ::google::protobuf::int32 value);
  inline void add_bcat(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bcat() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bcat();

  // repeated string badv = 10;
  inline int badv_size() const;
  inline void clear_badv();
  static const int kBadvFieldNumber = 10;
  inline const ::std::string& badv(int index) const;
  inline ::std::string* mutable_badv(int index);
  inline void set_badv(int index, const ::std::string& value);
  inline void set_badv(int index, const char* value);
  inline void set_badv(int index, const char* value, size_t size);
  inline ::std::string* add_badv();
  inline void add_badv(const ::std::string& value);
  inline void add_badv(const char* value);
  inline void add_badv(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& badv() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_badv();

  // optional bool isRecommend = 11;
  inline bool has_isrecommend() const;
  inline void clear_isrecommend();
  static const int kIsRecommendFieldNumber = 11;
  inline bool isrecommend() const;
  inline void set_isrecommend(bool value);

  // optional int32 at = 12;
  inline bool has_at() const;
  inline void clear_at();
  static const int kAtFieldNumber = 12;
  inline ::google::protobuf::int32 at() const;
  inline void set_at(::google::protobuf::int32 value);

  // optional int32 support_deep_link = 13;
  inline bool has_support_deep_link() const;
  inline void clear_support_deep_link();
  static const int kSupportDeepLinkFieldNumber = 13;
  inline ::google::protobuf::int32 support_deep_link() const;
  inline void set_support_deep_link(::google::protobuf::int32 value);

  // optional string bid_server_flag = 14;
  inline bool has_bid_server_flag() const;
  inline void clear_bid_server_flag();
  static const int kBidServerFlagFieldNumber = 14;
  inline const ::std::string& bid_server_flag() const;
  inline void set_bid_server_flag(const ::std::string& value);
  inline void set_bid_server_flag(const char* value);
  inline void set_bid_server_flag(const char* value, size_t size);
  inline ::std::string* mutable_bid_server_flag();
  inline ::std::string* release_bid_server_flag();
  inline void set_allocated_bid_server_flag(::std::string* bid_server_flag);

  // @@protoc_insertion_point(class_scope:com.pxene.proto.BidReqMessage)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_adxid();
  inline void clear_has_adxid();
  inline void set_has_app();
  inline void clear_has_app();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_isrecommend();
  inline void clear_has_isrecommend();
  inline void set_has_at();
  inline void clear_has_at();
  inline void set_has_support_deep_link();
  inline void clear_has_support_deep_link();
  inline void set_has_bid_server_flag();
  inline void clear_has_bid_server_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_version_;
  ::std::string* version_;
  ::std::string* requestid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Impression > imp_;
  ::com::pxene::proto::BidReqMessage_App* app_;
  ::com::pxene::proto::BidReqMessage_Device* device_;
  ::google::protobuf::int32 adxid_;
  bool isrecommend_;
  ::com::pxene::proto::BidReqMessage_UserInfo* userinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bcat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> badv_;
  ::google::protobuf::int32 at_;
  ::google::protobuf::int32 support_deep_link_;
  ::std::string* bid_server_flag_;
  friend void  protobuf_AddDesc_bid_5finfo_2eproto();
  friend void protobuf_AssignDesc_bid_5finfo_2eproto();
  friend void protobuf_ShutdownFile_bid_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BidReqMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// BidReqMessage_Impression_Banner

// optional int32 w = 1;
inline bool BidReqMessage_Impression_Banner::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidReqMessage_Impression_Banner::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidReqMessage_Impression_Banner::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidReqMessage_Impression_Banner::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Banner::w() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Banner.w)
  return w_;
}
inline void BidReqMessage_Impression_Banner::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Banner.w)
}

// optional int32 h = 2;
inline bool BidReqMessage_Impression_Banner::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidReqMessage_Impression_Banner::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidReqMessage_Impression_Banner::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidReqMessage_Impression_Banner::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Banner::h() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Banner.h)
  return h_;
}
inline void BidReqMessage_Impression_Banner::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Banner.h)
}

// repeated int32 btype = 3;
inline int BidReqMessage_Impression_Banner::btype_size() const {
  return btype_.size();
}
inline void BidReqMessage_Impression_Banner::clear_btype() {
  btype_.Clear();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Banner::btype(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Banner.btype)
  return btype_.Get(index);
}
inline void BidReqMessage_Impression_Banner::set_btype(int index, ::google::protobuf::int32 value) {
  btype_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Banner.btype)
}
inline void BidReqMessage_Impression_Banner::add_btype(::google::protobuf::int32 value) {
  btype_.Add(value);
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.Impression.Banner.btype)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidReqMessage_Impression_Banner::btype() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.Impression.Banner.btype)
  return btype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidReqMessage_Impression_Banner::mutable_btype() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.Impression.Banner.btype)
  return &btype_;
}

// repeated int32 battr = 4;
inline int BidReqMessage_Impression_Banner::battr_size() const {
  return battr_.size();
}
inline void BidReqMessage_Impression_Banner::clear_battr() {
  battr_.Clear();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Banner::battr(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Banner.battr)
  return battr_.Get(index);
}
inline void BidReqMessage_Impression_Banner::set_battr(int index, ::google::protobuf::int32 value) {
  battr_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Banner.battr)
}
inline void BidReqMessage_Impression_Banner::add_battr(::google::protobuf::int32 value) {
  battr_.Add(value);
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.Impression.Banner.battr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidReqMessage_Impression_Banner::battr() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.Impression.Banner.battr)
  return battr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidReqMessage_Impression_Banner::mutable_battr() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.Impression.Banner.battr)
  return &battr_;
}

// -------------------------------------------------------------------

// BidReqMessage_Impression_Video

// optional int32 w = 1;
inline bool BidReqMessage_Impression_Video::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidReqMessage_Impression_Video::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidReqMessage_Impression_Video::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidReqMessage_Impression_Video::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Video::w() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Video.w)
  return w_;
}
inline void BidReqMessage_Impression_Video::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Video.w)
}

// optional int32 h = 2;
inline bool BidReqMessage_Impression_Video::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidReqMessage_Impression_Video::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidReqMessage_Impression_Video::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidReqMessage_Impression_Video::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Video::h() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Video.h)
  return h_;
}
inline void BidReqMessage_Impression_Video::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Video.h)
}

// optional int32 display = 3;
inline bool BidReqMessage_Impression_Video::has_display() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidReqMessage_Impression_Video::set_has_display() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidReqMessage_Impression_Video::clear_has_display() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidReqMessage_Impression_Video::clear_display() {
  display_ = 0;
  clear_has_display();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Video::display() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Video.display)
  return display_;
}
inline void BidReqMessage_Impression_Video::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Video.display)
}

// optional int32 minduration = 4;
inline bool BidReqMessage_Impression_Video::has_minduration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidReqMessage_Impression_Video::set_has_minduration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidReqMessage_Impression_Video::clear_has_minduration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidReqMessage_Impression_Video::clear_minduration() {
  minduration_ = 0;
  clear_has_minduration();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Video::minduration() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Video.minduration)
  return minduration_;
}
inline void BidReqMessage_Impression_Video::set_minduration(::google::protobuf::int32 value) {
  set_has_minduration();
  minduration_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Video.minduration)
}

// optional int32 maxduration = 5;
inline bool BidReqMessage_Impression_Video::has_maxduration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidReqMessage_Impression_Video::set_has_maxduration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidReqMessage_Impression_Video::clear_has_maxduration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidReqMessage_Impression_Video::clear_maxduration() {
  maxduration_ = 0;
  clear_has_maxduration();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Video::maxduration() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Video.maxduration)
  return maxduration_;
}
inline void BidReqMessage_Impression_Video::set_maxduration(::google::protobuf::int32 value) {
  set_has_maxduration();
  maxduration_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Video.maxduration)
}

// repeated int32 mimes = 6;
inline int BidReqMessage_Impression_Video::mimes_size() const {
  return mimes_.size();
}
inline void BidReqMessage_Impression_Video::clear_mimes() {
  mimes_.Clear();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Video::mimes(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Video.mimes)
  return mimes_.Get(index);
}
inline void BidReqMessage_Impression_Video::set_mimes(int index, ::google::protobuf::int32 value) {
  mimes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Video.mimes)
}
inline void BidReqMessage_Impression_Video::add_mimes(::google::protobuf::int32 value) {
  mimes_.Add(value);
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.Impression.Video.mimes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidReqMessage_Impression_Video::mimes() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.Impression.Video.mimes)
  return mimes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidReqMessage_Impression_Video::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.Impression.Video.mimes)
  return &mimes_;
}

// repeated int32 battr = 7;
inline int BidReqMessage_Impression_Video::battr_size() const {
  return battr_.size();
}
inline void BidReqMessage_Impression_Video::clear_battr() {
  battr_.Clear();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Video::battr(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Video.battr)
  return battr_.Get(index);
}
inline void BidReqMessage_Impression_Video::set_battr(int index, ::google::protobuf::int32 value) {
  battr_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Video.battr)
}
inline void BidReqMessage_Impression_Video::add_battr(::google::protobuf::int32 value) {
  battr_.Add(value);
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.Impression.Video.battr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidReqMessage_Impression_Video::battr() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.Impression.Video.battr)
  return battr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidReqMessage_Impression_Video::mutable_battr() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.Impression.Video.battr)
  return &battr_;
}

// -------------------------------------------------------------------

// BidReqMessage_Impression_NativeAd_AssetInfo

// required int64 id = 1;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 BidReqMessage_Impression_NativeAd_AssetInfo::id() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.id)
  return id_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.id)
}

// required int32 requiredFlag = 2;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_requiredflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_requiredflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_requiredflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_requiredflag() {
  requiredflag_ = 0;
  clear_has_requiredflag();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::requiredflag() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.requiredFlag)
  return requiredflag_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_requiredflag(::google::protobuf::int32 value) {
  set_has_requiredflag();
  requiredflag_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.requiredFlag)
}

// required int32 type = 3;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::type() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.type)
  return type_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.type)
}

// optional int32 titleLen = 4;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_titlelen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_titlelen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_titlelen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_titlelen() {
  titlelen_ = 0;
  clear_has_titlelen();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::titlelen() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.titleLen)
  return titlelen_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_titlelen(::google::protobuf::int32 value) {
  set_has_titlelen();
  titlelen_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.titleLen)
}

// optional int32 imageType = 5;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_imagetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_imagetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_imagetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_imagetype() {
  imagetype_ = 0;
  clear_has_imagetype();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::imagetype() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageType)
  return imagetype_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_imagetype(::google::protobuf::int32 value) {
  set_has_imagetype();
  imagetype_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageType)
}

// optional int32 imageW = 6;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_imagew() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_imagew() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_imagew() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_imagew() {
  imagew_ = 0;
  clear_has_imagew();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::imagew() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageW)
  return imagew_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_imagew(::google::protobuf::int32 value) {
  set_has_imagew();
  imagew_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageW)
}

// optional int32 imageWMin = 7;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_imagewmin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_imagewmin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_imagewmin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_imagewmin() {
  imagewmin_ = 0;
  clear_has_imagewmin();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::imagewmin() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageWMin)
  return imagewmin_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_imagewmin(::google::protobuf::int32 value) {
  set_has_imagewmin();
  imagewmin_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageWMin)
}

// optional int32 imageH = 8;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_imageh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_imageh() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_imageh() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_imageh() {
  imageh_ = 0;
  clear_has_imageh();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::imageh() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageH)
  return imageh_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_imageh(::google::protobuf::int32 value) {
  set_has_imageh();
  imageh_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageH)
}

// optional int32 imageHMin = 9;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_imagehmin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_imagehmin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_imagehmin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_imagehmin() {
  imagehmin_ = 0;
  clear_has_imagehmin();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::imagehmin() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageHMin)
  return imagehmin_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_imagehmin(::google::protobuf::int32 value) {
  set_has_imagehmin();
  imagehmin_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageHMin)
}

// repeated int32 imageMimes = 10;
inline int BidReqMessage_Impression_NativeAd_AssetInfo::imagemimes_size() const {
  return imagemimes_.size();
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_imagemimes() {
  imagemimes_.Clear();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::imagemimes(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageMimes)
  return imagemimes_.Get(index);
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_imagemimes(int index, ::google::protobuf::int32 value) {
  imagemimes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageMimes)
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::add_imagemimes(::google::protobuf::int32 value) {
  imagemimes_.Add(value);
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageMimes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidReqMessage_Impression_NativeAd_AssetInfo::imagemimes() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageMimes)
  return imagemimes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidReqMessage_Impression_NativeAd_AssetInfo::mutable_imagemimes() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.imageMimes)
  return &imagemimes_;
}

// optional int32 dataType = 11;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_datatype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_datatype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::datatype() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.dataType)
  return datatype_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_datatype(::google::protobuf::int32 value) {
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.dataType)
}

// optional int32 dataLen = 12;
inline bool BidReqMessage_Impression_NativeAd_AssetInfo::has_datalen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_has_datalen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::clear_datalen() {
  datalen_ = 0;
  clear_has_datalen();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd_AssetInfo::datalen() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.dataLen)
  return datalen_;
}
inline void BidReqMessage_Impression_NativeAd_AssetInfo::set_datalen(::google::protobuf::int32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo.dataLen)
}

// -------------------------------------------------------------------

// BidReqMessage_Impression_NativeAd

// optional int32 layout = 1;
inline bool BidReqMessage_Impression_NativeAd::has_layout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidReqMessage_Impression_NativeAd::set_has_layout() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidReqMessage_Impression_NativeAd::clear_has_layout() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidReqMessage_Impression_NativeAd::clear_layout() {
  layout_ = 0;
  clear_has_layout();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd::layout() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.layout)
  return layout_;
}
inline void BidReqMessage_Impression_NativeAd::set_layout(::google::protobuf::int32 value) {
  set_has_layout();
  layout_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.layout)
}

// optional int32 plcmtcnt = 2;
inline bool BidReqMessage_Impression_NativeAd::has_plcmtcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidReqMessage_Impression_NativeAd::set_has_plcmtcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidReqMessage_Impression_NativeAd::clear_has_plcmtcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidReqMessage_Impression_NativeAd::clear_plcmtcnt() {
  plcmtcnt_ = 0;
  clear_has_plcmtcnt();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_NativeAd::plcmtcnt() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.plcmtcnt)
  return plcmtcnt_;
}
inline void BidReqMessage_Impression_NativeAd::set_plcmtcnt(::google::protobuf::int32 value) {
  set_has_plcmtcnt();
  plcmtcnt_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.NativeAd.plcmtcnt)
}

// repeated .com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo asset = 3;
inline int BidReqMessage_Impression_NativeAd::asset_size() const {
  return asset_.size();
}
inline void BidReqMessage_Impression_NativeAd::clear_asset() {
  asset_.Clear();
}
inline const ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo& BidReqMessage_Impression_NativeAd::asset(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.NativeAd.asset)
  return asset_.Get(index);
}
inline ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo* BidReqMessage_Impression_NativeAd::mutable_asset(int index) {
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.NativeAd.asset)
  return asset_.Mutable(index);
}
inline ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo* BidReqMessage_Impression_NativeAd::add_asset() {
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.Impression.NativeAd.asset)
  return asset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo >&
BidReqMessage_Impression_NativeAd::asset() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.Impression.NativeAd.asset)
  return asset_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Impression_NativeAd_AssetInfo >*
BidReqMessage_Impression_NativeAd::mutable_asset() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.Impression.NativeAd.asset)
  return &asset_;
}

// -------------------------------------------------------------------

// BidReqMessage_Impression_Ext

// optional int32 instl = 1;
inline bool BidReqMessage_Impression_Ext::has_instl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidReqMessage_Impression_Ext::set_has_instl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidReqMessage_Impression_Ext::clear_has_instl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidReqMessage_Impression_Ext::clear_instl() {
  instl_ = 0;
  clear_has_instl();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Ext::instl() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Ext.instl)
  return instl_;
}
inline void BidReqMessage_Impression_Ext::set_instl(::google::protobuf::int32 value) {
  set_has_instl();
  instl_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Ext.instl)
}

// optional int32 splash = 2;
inline bool BidReqMessage_Impression_Ext::has_splash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidReqMessage_Impression_Ext::set_has_splash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidReqMessage_Impression_Ext::clear_has_splash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidReqMessage_Impression_Ext::clear_splash() {
  splash_ = 0;
  clear_has_splash();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Ext::splash() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Ext.splash)
  return splash_;
}
inline void BidReqMessage_Impression_Ext::set_splash(::google::protobuf::int32 value) {
  set_has_splash();
  splash_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Ext.splash)
}

// optional int32 advid = 3;
inline bool BidReqMessage_Impression_Ext::has_advid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidReqMessage_Impression_Ext::set_has_advid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidReqMessage_Impression_Ext::clear_has_advid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidReqMessage_Impression_Ext::clear_advid() {
  advid_ = 0;
  clear_has_advid();
}
inline ::google::protobuf::int32 BidReqMessage_Impression_Ext::advid() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.Ext.advid)
  return advid_;
}
inline void BidReqMessage_Impression_Ext::set_advid(::google::protobuf::int32 value) {
  set_has_advid();
  advid_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.Ext.advid)
}

// -------------------------------------------------------------------

// BidReqMessage_Impression

// optional string id = 1;
inline bool BidReqMessage_Impression::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidReqMessage_Impression::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidReqMessage_Impression::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidReqMessage_Impression::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidReqMessage_Impression::id() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.id)
  return *id_;
}
inline void BidReqMessage_Impression::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.id)
}
inline void BidReqMessage_Impression::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Impression.id)
}
inline void BidReqMessage_Impression::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Impression.id)
}
inline ::std::string* BidReqMessage_Impression::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.id)
  return id_;
}
inline ::std::string* BidReqMessage_Impression::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Impression::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Impression.id)
}

// optional int32 type = 2;
inline bool BidReqMessage_Impression::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidReqMessage_Impression::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidReqMessage_Impression::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidReqMessage_Impression::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BidReqMessage_Impression::type() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.type)
  return type_;
}
inline void BidReqMessage_Impression::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.type)
}

// optional bool doBid = 3;
inline bool BidReqMessage_Impression::has_dobid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidReqMessage_Impression::set_has_dobid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidReqMessage_Impression::clear_has_dobid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidReqMessage_Impression::clear_dobid() {
  dobid_ = false;
  clear_has_dobid();
}
inline bool BidReqMessage_Impression::dobid() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.doBid)
  return dobid_;
}
inline void BidReqMessage_Impression::set_dobid(bool value) {
  set_has_dobid();
  dobid_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.doBid)
}

// optional .com.pxene.proto.BidReqMessage.Impression.Banner banner = 4;
inline bool BidReqMessage_Impression::has_banner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidReqMessage_Impression::set_has_banner() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidReqMessage_Impression::clear_has_banner() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidReqMessage_Impression::clear_banner() {
  if (banner_ != NULL) banner_->::com::pxene::proto::BidReqMessage_Impression_Banner::Clear();
  clear_has_banner();
}
inline const ::com::pxene::proto::BidReqMessage_Impression_Banner& BidReqMessage_Impression::banner() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.banner)
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
inline ::com::pxene::proto::BidReqMessage_Impression_Banner* BidReqMessage_Impression::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) banner_ = new ::com::pxene::proto::BidReqMessage_Impression_Banner;
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.banner)
  return banner_;
}
inline ::com::pxene::proto::BidReqMessage_Impression_Banner* BidReqMessage_Impression::release_banner() {
  clear_has_banner();
  ::com::pxene::proto::BidReqMessage_Impression_Banner* temp = banner_;
  banner_ = NULL;
  return temp;
}
inline void BidReqMessage_Impression::set_allocated_banner(::com::pxene::proto::BidReqMessage_Impression_Banner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Impression.banner)
}

// optional .com.pxene.proto.BidReqMessage.Impression.Video video = 5;
inline bool BidReqMessage_Impression::has_video() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidReqMessage_Impression::set_has_video() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidReqMessage_Impression::clear_has_video() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidReqMessage_Impression::clear_video() {
  if (video_ != NULL) video_->::com::pxene::proto::BidReqMessage_Impression_Video::Clear();
  clear_has_video();
}
inline const ::com::pxene::proto::BidReqMessage_Impression_Video& BidReqMessage_Impression::video() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::com::pxene::proto::BidReqMessage_Impression_Video* BidReqMessage_Impression::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::com::pxene::proto::BidReqMessage_Impression_Video;
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.video)
  return video_;
}
inline ::com::pxene::proto::BidReqMessage_Impression_Video* BidReqMessage_Impression::release_video() {
  clear_has_video();
  ::com::pxene::proto::BidReqMessage_Impression_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void BidReqMessage_Impression::set_allocated_video(::com::pxene::proto::BidReqMessage_Impression_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Impression.video)
}

// optional .com.pxene.proto.BidReqMessage.Impression.NativeAd nativeAd = 6;
inline bool BidReqMessage_Impression::has_nativead() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidReqMessage_Impression::set_has_nativead() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidReqMessage_Impression::clear_has_nativead() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidReqMessage_Impression::clear_nativead() {
  if (nativead_ != NULL) nativead_->::com::pxene::proto::BidReqMessage_Impression_NativeAd::Clear();
  clear_has_nativead();
}
inline const ::com::pxene::proto::BidReqMessage_Impression_NativeAd& BidReqMessage_Impression::nativead() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.nativeAd)
  return nativead_ != NULL ? *nativead_ : *default_instance_->nativead_;
}
inline ::com::pxene::proto::BidReqMessage_Impression_NativeAd* BidReqMessage_Impression::mutable_nativead() {
  set_has_nativead();
  if (nativead_ == NULL) nativead_ = new ::com::pxene::proto::BidReqMessage_Impression_NativeAd;
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.nativeAd)
  return nativead_;
}
inline ::com::pxene::proto::BidReqMessage_Impression_NativeAd* BidReqMessage_Impression::release_nativead() {
  clear_has_nativead();
  ::com::pxene::proto::BidReqMessage_Impression_NativeAd* temp = nativead_;
  nativead_ = NULL;
  return temp;
}
inline void BidReqMessage_Impression::set_allocated_nativead(::com::pxene::proto::BidReqMessage_Impression_NativeAd* nativead) {
  delete nativead_;
  nativead_ = nativead;
  if (nativead) {
    set_has_nativead();
  } else {
    clear_has_nativead();
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Impression.nativeAd)
}

// optional int32 bidFloor = 7;
inline bool BidReqMessage_Impression::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidReqMessage_Impression::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidReqMessage_Impression::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidReqMessage_Impression::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
inline ::google::protobuf::int32 BidReqMessage_Impression::bidfloor() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.bidFloor)
  return bidfloor_;
}
inline void BidReqMessage_Impression::set_bidfloor(::google::protobuf::int32 value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.bidFloor)
}

// optional string bidFloorCur = 8;
inline bool BidReqMessage_Impression::has_bidfloorcur() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidReqMessage_Impression::set_has_bidfloorcur() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidReqMessage_Impression::clear_has_bidfloorcur() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidReqMessage_Impression::clear_bidfloorcur() {
  if (bidfloorcur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidfloorcur_->clear();
  }
  clear_has_bidfloorcur();
}
inline const ::std::string& BidReqMessage_Impression::bidfloorcur() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.bidFloorCur)
  return *bidfloorcur_;
}
inline void BidReqMessage_Impression::set_bidfloorcur(const ::std::string& value) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.bidFloorCur)
}
inline void BidReqMessage_Impression::set_bidfloorcur(const char* value) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Impression.bidFloorCur)
}
inline void BidReqMessage_Impression::set_bidfloorcur(const char* value, size_t size) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Impression.bidFloorCur)
}
inline ::std::string* BidReqMessage_Impression::mutable_bidfloorcur() {
  set_has_bidfloorcur();
  if (bidfloorcur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidfloorcur_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.bidFloorCur)
  return bidfloorcur_;
}
inline ::std::string* BidReqMessage_Impression::release_bidfloorcur() {
  clear_has_bidfloorcur();
  if (bidfloorcur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bidfloorcur_;
    bidfloorcur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Impression::set_allocated_bidfloorcur(::std::string* bidfloorcur) {
  if (bidfloorcur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidfloorcur_;
  }
  if (bidfloorcur) {
    set_has_bidfloorcur();
    bidfloorcur_ = bidfloorcur;
  } else {
    clear_has_bidfloorcur();
    bidfloorcur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Impression.bidFloorCur)
}

// optional int32 adPos = 9;
inline bool BidReqMessage_Impression::has_adpos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidReqMessage_Impression::set_has_adpos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidReqMessage_Impression::clear_has_adpos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidReqMessage_Impression::clear_adpos() {
  adpos_ = 0;
  clear_has_adpos();
}
inline ::google::protobuf::int32 BidReqMessage_Impression::adpos() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.adPos)
  return adpos_;
}
inline void BidReqMessage_Impression::set_adpos(::google::protobuf::int32 value) {
  set_has_adpos();
  adpos_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.adPos)
}

// optional .com.pxene.proto.BidReqMessage.Impression.Ext ext = 10;
inline bool BidReqMessage_Impression::has_ext() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidReqMessage_Impression::set_has_ext() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidReqMessage_Impression::clear_has_ext() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidReqMessage_Impression::clear_ext() {
  if (ext_ != NULL) ext_->::com::pxene::proto::BidReqMessage_Impression_Ext::Clear();
  clear_has_ext();
}
inline const ::com::pxene::proto::BidReqMessage_Impression_Ext& BidReqMessage_Impression::ext() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.ext)
  return ext_ != NULL ? *ext_ : *default_instance_->ext_;
}
inline ::com::pxene::proto::BidReqMessage_Impression_Ext* BidReqMessage_Impression::mutable_ext() {
  set_has_ext();
  if (ext_ == NULL) ext_ = new ::com::pxene::proto::BidReqMessage_Impression_Ext;
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.ext)
  return ext_;
}
inline ::com::pxene::proto::BidReqMessage_Impression_Ext* BidReqMessage_Impression::release_ext() {
  clear_has_ext();
  ::com::pxene::proto::BidReqMessage_Impression_Ext* temp = ext_;
  ext_ = NULL;
  return temp;
}
inline void BidReqMessage_Impression::set_allocated_ext(::com::pxene::proto::BidReqMessage_Impression_Ext* ext) {
  delete ext_;
  ext_ = ext;
  if (ext) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Impression.ext)
}

// optional int32 selMapid = 11;
inline bool BidReqMessage_Impression::has_selmapid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidReqMessage_Impression::set_has_selmapid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidReqMessage_Impression::clear_has_selmapid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidReqMessage_Impression::clear_selmapid() {
  selmapid_ = 0;
  clear_has_selmapid();
}
inline ::google::protobuf::int32 BidReqMessage_Impression::selmapid() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.selMapid)
  return selmapid_;
}
inline void BidReqMessage_Impression::set_selmapid(::google::protobuf::int32 value) {
  set_has_selmapid();
  selmapid_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.selMapid)
}

// optional int32 price = 12;
inline bool BidReqMessage_Impression::has_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidReqMessage_Impression::set_has_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidReqMessage_Impression::clear_has_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidReqMessage_Impression::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 BidReqMessage_Impression::price() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.price)
  return price_;
}
inline void BidReqMessage_Impression::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.price)
}

// optional string track_url_par = 13;
inline bool BidReqMessage_Impression::has_track_url_par() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidReqMessage_Impression::set_has_track_url_par() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidReqMessage_Impression::clear_has_track_url_par() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidReqMessage_Impression::clear_track_url_par() {
  if (track_url_par_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    track_url_par_->clear();
  }
  clear_has_track_url_par();
}
inline const ::std::string& BidReqMessage_Impression::track_url_par() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.track_url_par)
  return *track_url_par_;
}
inline void BidReqMessage_Impression::set_track_url_par(const ::std::string& value) {
  set_has_track_url_par();
  if (track_url_par_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    track_url_par_ = new ::std::string;
  }
  track_url_par_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.track_url_par)
}
inline void BidReqMessage_Impression::set_track_url_par(const char* value) {
  set_has_track_url_par();
  if (track_url_par_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    track_url_par_ = new ::std::string;
  }
  track_url_par_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Impression.track_url_par)
}
inline void BidReqMessage_Impression::set_track_url_par(const char* value, size_t size) {
  set_has_track_url_par();
  if (track_url_par_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    track_url_par_ = new ::std::string;
  }
  track_url_par_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Impression.track_url_par)
}
inline ::std::string* BidReqMessage_Impression::mutable_track_url_par() {
  set_has_track_url_par();
  if (track_url_par_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    track_url_par_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.track_url_par)
  return track_url_par_;
}
inline ::std::string* BidReqMessage_Impression::release_track_url_par() {
  clear_has_track_url_par();
  if (track_url_par_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = track_url_par_;
    track_url_par_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Impression::set_allocated_track_url_par(::std::string* track_url_par) {
  if (track_url_par_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete track_url_par_;
  }
  if (track_url_par) {
    set_has_track_url_par();
    track_url_par_ = track_url_par;
  } else {
    clear_has_track_url_par();
    track_url_par_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Impression.track_url_par)
}

// optional string curl = 14;
inline bool BidReqMessage_Impression::has_curl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidReqMessage_Impression::set_has_curl() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidReqMessage_Impression::clear_has_curl() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidReqMessage_Impression::clear_curl() {
  if (curl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curl_->clear();
  }
  clear_has_curl();
}
inline const ::std::string& BidReqMessage_Impression::curl() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.curl)
  return *curl_;
}
inline void BidReqMessage_Impression::set_curl(const ::std::string& value) {
  set_has_curl();
  if (curl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curl_ = new ::std::string;
  }
  curl_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.curl)
}
inline void BidReqMessage_Impression::set_curl(const char* value) {
  set_has_curl();
  if (curl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curl_ = new ::std::string;
  }
  curl_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Impression.curl)
}
inline void BidReqMessage_Impression::set_curl(const char* value, size_t size) {
  set_has_curl();
  if (curl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curl_ = new ::std::string;
  }
  curl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Impression.curl)
}
inline ::std::string* BidReqMessage_Impression::mutable_curl() {
  set_has_curl();
  if (curl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.curl)
  return curl_;
}
inline ::std::string* BidReqMessage_Impression::release_curl() {
  clear_has_curl();
  if (curl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = curl_;
    curl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Impression::set_allocated_curl(::std::string* curl) {
  if (curl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curl_;
  }
  if (curl) {
    set_has_curl();
    curl_ = curl;
  } else {
    clear_has_curl();
    curl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Impression.curl)
}

// optional string monitorcode = 15;
inline bool BidReqMessage_Impression::has_monitorcode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidReqMessage_Impression::set_has_monitorcode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidReqMessage_Impression::clear_has_monitorcode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidReqMessage_Impression::clear_monitorcode() {
  if (monitorcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    monitorcode_->clear();
  }
  clear_has_monitorcode();
}
inline const ::std::string& BidReqMessage_Impression::monitorcode() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.monitorcode)
  return *monitorcode_;
}
inline void BidReqMessage_Impression::set_monitorcode(const ::std::string& value) {
  set_has_monitorcode();
  if (monitorcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    monitorcode_ = new ::std::string;
  }
  monitorcode_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.monitorcode)
}
inline void BidReqMessage_Impression::set_monitorcode(const char* value) {
  set_has_monitorcode();
  if (monitorcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    monitorcode_ = new ::std::string;
  }
  monitorcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Impression.monitorcode)
}
inline void BidReqMessage_Impression::set_monitorcode(const char* value, size_t size) {
  set_has_monitorcode();
  if (monitorcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    monitorcode_ = new ::std::string;
  }
  monitorcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Impression.monitorcode)
}
inline ::std::string* BidReqMessage_Impression::mutable_monitorcode() {
  set_has_monitorcode();
  if (monitorcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    monitorcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.monitorcode)
  return monitorcode_;
}
inline ::std::string* BidReqMessage_Impression::release_monitorcode() {
  clear_has_monitorcode();
  if (monitorcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = monitorcode_;
    monitorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Impression::set_allocated_monitorcode(::std::string* monitorcode) {
  if (monitorcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete monitorcode_;
  }
  if (monitorcode) {
    set_has_monitorcode();
    monitorcode_ = monitorcode;
  } else {
    clear_has_monitorcode();
    monitorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Impression.monitorcode)
}

// repeated string imonitorurl = 16;
inline int BidReqMessage_Impression::imonitorurl_size() const {
  return imonitorurl_.size();
}
inline void BidReqMessage_Impression::clear_imonitorurl() {
  imonitorurl_.Clear();
}
inline const ::std::string& BidReqMessage_Impression::imonitorurl(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.imonitorurl)
  return imonitorurl_.Get(index);
}
inline ::std::string* BidReqMessage_Impression::mutable_imonitorurl(int index) {
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.imonitorurl)
  return imonitorurl_.Mutable(index);
}
inline void BidReqMessage_Impression::set_imonitorurl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.imonitorurl)
  imonitorurl_.Mutable(index)->assign(value);
}
inline void BidReqMessage_Impression::set_imonitorurl(int index, const char* value) {
  imonitorurl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Impression.imonitorurl)
}
inline void BidReqMessage_Impression::set_imonitorurl(int index, const char* value, size_t size) {
  imonitorurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Impression.imonitorurl)
}
inline ::std::string* BidReqMessage_Impression::add_imonitorurl() {
  return imonitorurl_.Add();
}
inline void BidReqMessage_Impression::add_imonitorurl(const ::std::string& value) {
  imonitorurl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.Impression.imonitorurl)
}
inline void BidReqMessage_Impression::add_imonitorurl(const char* value) {
  imonitorurl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.pxene.proto.BidReqMessage.Impression.imonitorurl)
}
inline void BidReqMessage_Impression::add_imonitorurl(const char* value, size_t size) {
  imonitorurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.pxene.proto.BidReqMessage.Impression.imonitorurl)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidReqMessage_Impression::imonitorurl() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.Impression.imonitorurl)
  return imonitorurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidReqMessage_Impression::mutable_imonitorurl() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.Impression.imonitorurl)
  return &imonitorurl_;
}

// repeated string cmonitorurl = 17;
inline int BidReqMessage_Impression::cmonitorurl_size() const {
  return cmonitorurl_.size();
}
inline void BidReqMessage_Impression::clear_cmonitorurl() {
  cmonitorurl_.Clear();
}
inline const ::std::string& BidReqMessage_Impression::cmonitorurl(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Impression.cmonitorurl)
  return cmonitorurl_.Get(index);
}
inline ::std::string* BidReqMessage_Impression::mutable_cmonitorurl(int index) {
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Impression.cmonitorurl)
  return cmonitorurl_.Mutable(index);
}
inline void BidReqMessage_Impression::set_cmonitorurl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Impression.cmonitorurl)
  cmonitorurl_.Mutable(index)->assign(value);
}
inline void BidReqMessage_Impression::set_cmonitorurl(int index, const char* value) {
  cmonitorurl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Impression.cmonitorurl)
}
inline void BidReqMessage_Impression::set_cmonitorurl(int index, const char* value, size_t size) {
  cmonitorurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Impression.cmonitorurl)
}
inline ::std::string* BidReqMessage_Impression::add_cmonitorurl() {
  return cmonitorurl_.Add();
}
inline void BidReqMessage_Impression::add_cmonitorurl(const ::std::string& value) {
  cmonitorurl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.Impression.cmonitorurl)
}
inline void BidReqMessage_Impression::add_cmonitorurl(const char* value) {
  cmonitorurl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.pxene.proto.BidReqMessage.Impression.cmonitorurl)
}
inline void BidReqMessage_Impression::add_cmonitorurl(const char* value, size_t size) {
  cmonitorurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.pxene.proto.BidReqMessage.Impression.cmonitorurl)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidReqMessage_Impression::cmonitorurl() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.Impression.cmonitorurl)
  return cmonitorurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidReqMessage_Impression::mutable_cmonitorurl() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.Impression.cmonitorurl)
  return &cmonitorurl_;
}

// -------------------------------------------------------------------

// BidReqMessage_App

// optional string id = 1;
inline bool BidReqMessage_App::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidReqMessage_App::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidReqMessage_App::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidReqMessage_App::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidReqMessage_App::id() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.App.id)
  return *id_;
}
inline void BidReqMessage_App::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.App.id)
}
inline void BidReqMessage_App::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.App.id)
}
inline void BidReqMessage_App::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.App.id)
}
inline ::std::string* BidReqMessage_App::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.App.id)
  return id_;
}
inline ::std::string* BidReqMessage_App::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_App::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.App.id)
}

// optional string name = 2;
inline bool BidReqMessage_App::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidReqMessage_App::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidReqMessage_App::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidReqMessage_App::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BidReqMessage_App::name() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.App.name)
  return *name_;
}
inline void BidReqMessage_App::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.App.name)
}
inline void BidReqMessage_App::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.App.name)
}
inline void BidReqMessage_App::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.App.name)
}
inline ::std::string* BidReqMessage_App::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.App.name)
  return name_;
}
inline ::std::string* BidReqMessage_App::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_App::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.App.name)
}

// repeated int32 cat = 3;
inline int BidReqMessage_App::cat_size() const {
  return cat_.size();
}
inline void BidReqMessage_App::clear_cat() {
  cat_.Clear();
}
inline ::google::protobuf::int32 BidReqMessage_App::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.App.cat)
  return cat_.Get(index);
}
inline void BidReqMessage_App::set_cat(int index, ::google::protobuf::int32 value) {
  cat_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.App.cat)
}
inline void BidReqMessage_App::add_cat(::google::protobuf::int32 value) {
  cat_.Add(value);
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.App.cat)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidReqMessage_App::cat() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.App.cat)
  return cat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidReqMessage_App::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.App.cat)
  return &cat_;
}

// optional string bundle = 4;
inline bool BidReqMessage_App::has_bundle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidReqMessage_App::set_has_bundle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidReqMessage_App::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidReqMessage_App::clear_bundle() {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_->clear();
  }
  clear_has_bundle();
}
inline const ::std::string& BidReqMessage_App::bundle() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.App.bundle)
  return *bundle_;
}
inline void BidReqMessage_App::set_bundle(const ::std::string& value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.App.bundle)
}
inline void BidReqMessage_App::set_bundle(const char* value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.App.bundle)
}
inline void BidReqMessage_App::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.App.bundle)
}
inline ::std::string* BidReqMessage_App::mutable_bundle() {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.App.bundle)
  return bundle_;
}
inline ::std::string* BidReqMessage_App::release_bundle() {
  clear_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bundle_;
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_App::set_allocated_bundle(::std::string* bundle) {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (bundle) {
    set_has_bundle();
    bundle_ = bundle;
  } else {
    clear_has_bundle();
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.App.bundle)
}

// optional string storeurl = 5;
inline bool BidReqMessage_App::has_storeurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidReqMessage_App::set_has_storeurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidReqMessage_App::clear_has_storeurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidReqMessage_App::clear_storeurl() {
  if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_->clear();
  }
  clear_has_storeurl();
}
inline const ::std::string& BidReqMessage_App::storeurl() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.App.storeurl)
  return *storeurl_;
}
inline void BidReqMessage_App::set_storeurl(const ::std::string& value) {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  storeurl_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.App.storeurl)
}
inline void BidReqMessage_App::set_storeurl(const char* value) {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  storeurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.App.storeurl)
}
inline void BidReqMessage_App::set_storeurl(const char* value, size_t size) {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  storeurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.App.storeurl)
}
inline ::std::string* BidReqMessage_App::mutable_storeurl() {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.App.storeurl)
  return storeurl_;
}
inline ::std::string* BidReqMessage_App::release_storeurl() {
  clear_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = storeurl_;
    storeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_App::set_allocated_storeurl(::std::string* storeurl) {
  if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storeurl_;
  }
  if (storeurl) {
    set_has_storeurl();
    storeurl_ = storeurl;
  } else {
    clear_has_storeurl();
    storeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.App.storeurl)
}

// -------------------------------------------------------------------

// BidReqMessage_Device_DeviceIdPair

// required int32 type = 1;
inline bool BidReqMessage_Device_DeviceIdPair::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidReqMessage_Device_DeviceIdPair::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidReqMessage_Device_DeviceIdPair::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidReqMessage_Device_DeviceIdPair::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BidReqMessage_Device_DeviceIdPair::type() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.DeviceIdPair.type)
  return type_;
}
inline void BidReqMessage_Device_DeviceIdPair::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.DeviceIdPair.type)
}

// required string id = 2;
inline bool BidReqMessage_Device_DeviceIdPair::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidReqMessage_Device_DeviceIdPair::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidReqMessage_Device_DeviceIdPair::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidReqMessage_Device_DeviceIdPair::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidReqMessage_Device_DeviceIdPair::id() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.DeviceIdPair.id)
  return *id_;
}
inline void BidReqMessage_Device_DeviceIdPair::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.DeviceIdPair.id)
}
inline void BidReqMessage_Device_DeviceIdPair::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Device.DeviceIdPair.id)
}
inline void BidReqMessage_Device_DeviceIdPair::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Device.DeviceIdPair.id)
}
inline ::std::string* BidReqMessage_Device_DeviceIdPair::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Device.DeviceIdPair.id)
  return id_;
}
inline ::std::string* BidReqMessage_Device_DeviceIdPair::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Device_DeviceIdPair::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Device.DeviceIdPair.id)
}

// -------------------------------------------------------------------

// BidReqMessage_Device

// repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dids = 1;
inline int BidReqMessage_Device::dids_size() const {
  return dids_.size();
}
inline void BidReqMessage_Device::clear_dids() {
  dids_.Clear();
}
inline const ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair& BidReqMessage_Device::dids(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.dids)
  return dids_.Get(index);
}
inline ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair* BidReqMessage_Device::mutable_dids(int index) {
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Device.dids)
  return dids_.Mutable(index);
}
inline ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair* BidReqMessage_Device::add_dids() {
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.Device.dids)
  return dids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair >&
BidReqMessage_Device::dids() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.Device.dids)
  return dids_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair >*
BidReqMessage_Device::mutable_dids() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.Device.dids)
  return &dids_;
}

// repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dpids = 2;
inline int BidReqMessage_Device::dpids_size() const {
  return dpids_.size();
}
inline void BidReqMessage_Device::clear_dpids() {
  dpids_.Clear();
}
inline const ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair& BidReqMessage_Device::dpids(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.dpids)
  return dpids_.Get(index);
}
inline ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair* BidReqMessage_Device::mutable_dpids(int index) {
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Device.dpids)
  return dpids_.Mutable(index);
}
inline ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair* BidReqMessage_Device::add_dpids() {
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.Device.dpids)
  return dpids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair >&
BidReqMessage_Device::dpids() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.Device.dpids)
  return dpids_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Device_DeviceIdPair >*
BidReqMessage_Device::mutable_dpids() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.Device.dpids)
  return &dpids_;
}

// optional string ua = 3;
inline bool BidReqMessage_Device::has_ua() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidReqMessage_Device::set_has_ua() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidReqMessage_Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidReqMessage_Device::clear_ua() {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_->clear();
  }
  clear_has_ua();
}
inline const ::std::string& BidReqMessage_Device::ua() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.ua)
  return *ua_;
}
inline void BidReqMessage_Device::set_ua(const ::std::string& value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.ua)
}
inline void BidReqMessage_Device::set_ua(const char* value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Device.ua)
}
inline void BidReqMessage_Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Device.ua)
}
inline ::std::string* BidReqMessage_Device::mutable_ua() {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Device.ua)
  return ua_;
}
inline ::std::string* BidReqMessage_Device::release_ua() {
  clear_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ua_;
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Device::set_allocated_ua(::std::string* ua) {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (ua) {
    set_has_ua();
    ua_ = ua;
  } else {
    clear_has_ua();
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Device.ua)
}

// optional int32 location = 4;
inline bool BidReqMessage_Device::has_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidReqMessage_Device::set_has_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidReqMessage_Device::clear_has_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidReqMessage_Device::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 BidReqMessage_Device::location() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.location)
  return location_;
}
inline void BidReqMessage_Device::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.location)
}

// optional string ip = 5;
inline bool BidReqMessage_Device::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidReqMessage_Device::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidReqMessage_Device::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidReqMessage_Device::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BidReqMessage_Device::ip() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.ip)
  return *ip_;
}
inline void BidReqMessage_Device::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.ip)
}
inline void BidReqMessage_Device::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Device.ip)
}
inline void BidReqMessage_Device::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Device.ip)
}
inline ::std::string* BidReqMessage_Device::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Device.ip)
  return ip_;
}
inline ::std::string* BidReqMessage_Device::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Device::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Device.ip)
}

// optional double geoLat = 6;
inline bool BidReqMessage_Device::has_geolat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidReqMessage_Device::set_has_geolat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidReqMessage_Device::clear_has_geolat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidReqMessage_Device::clear_geolat() {
  geolat_ = 0;
  clear_has_geolat();
}
inline double BidReqMessage_Device::geolat() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.geoLat)
  return geolat_;
}
inline void BidReqMessage_Device::set_geolat(double value) {
  set_has_geolat();
  geolat_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.geoLat)
}

// optional double geoLon = 7;
inline bool BidReqMessage_Device::has_geolon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidReqMessage_Device::set_has_geolon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidReqMessage_Device::clear_has_geolon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidReqMessage_Device::clear_geolon() {
  geolon_ = 0;
  clear_has_geolon();
}
inline double BidReqMessage_Device::geolon() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.geoLon)
  return geolon_;
}
inline void BidReqMessage_Device::set_geolon(double value) {
  set_has_geolon();
  geolon_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.geoLon)
}

// optional int32 carrier = 8;
inline bool BidReqMessage_Device::has_carrier() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidReqMessage_Device::set_has_carrier() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidReqMessage_Device::clear_has_carrier() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidReqMessage_Device::clear_carrier() {
  carrier_ = 0;
  clear_has_carrier();
}
inline ::google::protobuf::int32 BidReqMessage_Device::carrier() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.carrier)
  return carrier_;
}
inline void BidReqMessage_Device::set_carrier(::google::protobuf::int32 value) {
  set_has_carrier();
  carrier_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.carrier)
}

// optional int32 make = 9;
inline bool BidReqMessage_Device::has_make() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidReqMessage_Device::set_has_make() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidReqMessage_Device::clear_has_make() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidReqMessage_Device::clear_make() {
  make_ = 0;
  clear_has_make();
}
inline ::google::protobuf::int32 BidReqMessage_Device::make() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.make)
  return make_;
}
inline void BidReqMessage_Device::set_make(::google::protobuf::int32 value) {
  set_has_make();
  make_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.make)
}

// optional string makestr = 10;
inline bool BidReqMessage_Device::has_makestr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidReqMessage_Device::set_has_makestr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidReqMessage_Device::clear_has_makestr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidReqMessage_Device::clear_makestr() {
  if (makestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    makestr_->clear();
  }
  clear_has_makestr();
}
inline const ::std::string& BidReqMessage_Device::makestr() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.makestr)
  return *makestr_;
}
inline void BidReqMessage_Device::set_makestr(const ::std::string& value) {
  set_has_makestr();
  if (makestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    makestr_ = new ::std::string;
  }
  makestr_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.makestr)
}
inline void BidReqMessage_Device::set_makestr(const char* value) {
  set_has_makestr();
  if (makestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    makestr_ = new ::std::string;
  }
  makestr_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Device.makestr)
}
inline void BidReqMessage_Device::set_makestr(const char* value, size_t size) {
  set_has_makestr();
  if (makestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    makestr_ = new ::std::string;
  }
  makestr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Device.makestr)
}
inline ::std::string* BidReqMessage_Device::mutable_makestr() {
  set_has_makestr();
  if (makestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    makestr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Device.makestr)
  return makestr_;
}
inline ::std::string* BidReqMessage_Device::release_makestr() {
  clear_has_makestr();
  if (makestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = makestr_;
    makestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Device::set_allocated_makestr(::std::string* makestr) {
  if (makestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete makestr_;
  }
  if (makestr) {
    set_has_makestr();
    makestr_ = makestr;
  } else {
    clear_has_makestr();
    makestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Device.makestr)
}

// optional string model = 11;
inline bool BidReqMessage_Device::has_model() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidReqMessage_Device::set_has_model() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidReqMessage_Device::clear_has_model() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidReqMessage_Device::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& BidReqMessage_Device::model() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.model)
  return *model_;
}
inline void BidReqMessage_Device::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.model)
}
inline void BidReqMessage_Device::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Device.model)
}
inline void BidReqMessage_Device::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Device.model)
}
inline ::std::string* BidReqMessage_Device::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Device.model)
  return model_;
}
inline ::std::string* BidReqMessage_Device::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Device::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Device.model)
}

// optional int32 os = 12;
inline bool BidReqMessage_Device::has_os() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidReqMessage_Device::set_has_os() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidReqMessage_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidReqMessage_Device::clear_os() {
  os_ = 0;
  clear_has_os();
}
inline ::google::protobuf::int32 BidReqMessage_Device::os() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.os)
  return os_;
}
inline void BidReqMessage_Device::set_os(::google::protobuf::int32 value) {
  set_has_os();
  os_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.os)
}

// optional string osv = 13;
inline bool BidReqMessage_Device::has_osv() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidReqMessage_Device::set_has_osv() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidReqMessage_Device::clear_has_osv() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidReqMessage_Device::clear_osv() {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_->clear();
  }
  clear_has_osv();
}
inline const ::std::string& BidReqMessage_Device::osv() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.osv)
  return *osv_;
}
inline void BidReqMessage_Device::set_osv(const ::std::string& value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.osv)
}
inline void BidReqMessage_Device::set_osv(const char* value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.Device.osv)
}
inline void BidReqMessage_Device::set_osv(const char* value, size_t size) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.Device.osv)
}
inline ::std::string* BidReqMessage_Device::mutable_osv() {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.Device.osv)
  return osv_;
}
inline ::std::string* BidReqMessage_Device::release_osv() {
  clear_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = osv_;
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_Device::set_allocated_osv(::std::string* osv) {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (osv) {
    set_has_osv();
    osv_ = osv;
  } else {
    clear_has_osv();
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.Device.osv)
}

// optional int32 connectionType = 14;
inline bool BidReqMessage_Device::has_connectiontype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidReqMessage_Device::set_has_connectiontype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidReqMessage_Device::clear_has_connectiontype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidReqMessage_Device::clear_connectiontype() {
  connectiontype_ = 0;
  clear_has_connectiontype();
}
inline ::google::protobuf::int32 BidReqMessage_Device::connectiontype() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.connectionType)
  return connectiontype_;
}
inline void BidReqMessage_Device::set_connectiontype(::google::protobuf::int32 value) {
  set_has_connectiontype();
  connectiontype_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.connectionType)
}

// optional int32 deviceType = 15;
inline bool BidReqMessage_Device::has_devicetype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidReqMessage_Device::set_has_devicetype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidReqMessage_Device::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidReqMessage_Device::clear_devicetype() {
  devicetype_ = 0;
  clear_has_devicetype();
}
inline ::google::protobuf::int32 BidReqMessage_Device::devicetype() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.Device.deviceType)
  return devicetype_;
}
inline void BidReqMessage_Device::set_devicetype(::google::protobuf::int32 value) {
  set_has_devicetype();
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.Device.deviceType)
}

// -------------------------------------------------------------------

// BidReqMessage_UserInfo

// optional string id = 1;
inline bool BidReqMessage_UserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidReqMessage_UserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidReqMessage_UserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidReqMessage_UserInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidReqMessage_UserInfo::id() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.UserInfo.id)
  return *id_;
}
inline void BidReqMessage_UserInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.UserInfo.id)
}
inline void BidReqMessage_UserInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.UserInfo.id)
}
inline void BidReqMessage_UserInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.UserInfo.id)
}
inline ::std::string* BidReqMessage_UserInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.UserInfo.id)
  return id_;
}
inline ::std::string* BidReqMessage_UserInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_UserInfo::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.UserInfo.id)
}

// optional int32 gender = 2;
inline bool BidReqMessage_UserInfo::has_gender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidReqMessage_UserInfo::set_has_gender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidReqMessage_UserInfo::clear_has_gender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidReqMessage_UserInfo::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 BidReqMessage_UserInfo::gender() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.UserInfo.gender)
  return gender_;
}
inline void BidReqMessage_UserInfo::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.UserInfo.gender)
}

// optional int32 yob = 3;
inline bool BidReqMessage_UserInfo::has_yob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidReqMessage_UserInfo::set_has_yob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidReqMessage_UserInfo::clear_has_yob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidReqMessage_UserInfo::clear_yob() {
  yob_ = 0;
  clear_has_yob();
}
inline ::google::protobuf::int32 BidReqMessage_UserInfo::yob() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.UserInfo.yob)
  return yob_;
}
inline void BidReqMessage_UserInfo::set_yob(::google::protobuf::int32 value) {
  set_has_yob();
  yob_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.UserInfo.yob)
}

// optional string keywords = 4;
inline bool BidReqMessage_UserInfo::has_keywords() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidReqMessage_UserInfo::set_has_keywords() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidReqMessage_UserInfo::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidReqMessage_UserInfo::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& BidReqMessage_UserInfo::keywords() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.UserInfo.keywords)
  return *keywords_;
}
inline void BidReqMessage_UserInfo::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.UserInfo.keywords)
}
inline void BidReqMessage_UserInfo::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.UserInfo.keywords)
}
inline void BidReqMessage_UserInfo::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.UserInfo.keywords)
}
inline ::std::string* BidReqMessage_UserInfo::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.UserInfo.keywords)
  return keywords_;
}
inline ::std::string* BidReqMessage_UserInfo::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_UserInfo::set_allocated_keywords(::std::string* keywords) {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (keywords) {
    set_has_keywords();
    keywords_ = keywords;
  } else {
    clear_has_keywords();
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.UserInfo.keywords)
}

// optional double geoLat = 5;
inline bool BidReqMessage_UserInfo::has_geolat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidReqMessage_UserInfo::set_has_geolat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidReqMessage_UserInfo::clear_has_geolat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidReqMessage_UserInfo::clear_geolat() {
  geolat_ = 0;
  clear_has_geolat();
}
inline double BidReqMessage_UserInfo::geolat() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.UserInfo.geoLat)
  return geolat_;
}
inline void BidReqMessage_UserInfo::set_geolat(double value) {
  set_has_geolat();
  geolat_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.UserInfo.geoLat)
}

// optional double geoLon = 6;
inline bool BidReqMessage_UserInfo::has_geolon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidReqMessage_UserInfo::set_has_geolon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidReqMessage_UserInfo::clear_has_geolon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidReqMessage_UserInfo::clear_geolon() {
  geolon_ = 0;
  clear_has_geolon();
}
inline double BidReqMessage_UserInfo::geolon() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.UserInfo.geoLon)
  return geolon_;
}
inline void BidReqMessage_UserInfo::set_geolon(double value) {
  set_has_geolon();
  geolon_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.UserInfo.geoLon)
}

// optional string searchkey = 7;
inline bool BidReqMessage_UserInfo::has_searchkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidReqMessage_UserInfo::set_has_searchkey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidReqMessage_UserInfo::clear_has_searchkey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidReqMessage_UserInfo::clear_searchkey() {
  if (searchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    searchkey_->clear();
  }
  clear_has_searchkey();
}
inline const ::std::string& BidReqMessage_UserInfo::searchkey() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.UserInfo.searchkey)
  return *searchkey_;
}
inline void BidReqMessage_UserInfo::set_searchkey(const ::std::string& value) {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    searchkey_ = new ::std::string;
  }
  searchkey_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.UserInfo.searchkey)
}
inline void BidReqMessage_UserInfo::set_searchkey(const char* value) {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    searchkey_ = new ::std::string;
  }
  searchkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.UserInfo.searchkey)
}
inline void BidReqMessage_UserInfo::set_searchkey(const char* value, size_t size) {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    searchkey_ = new ::std::string;
  }
  searchkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.UserInfo.searchkey)
}
inline ::std::string* BidReqMessage_UserInfo::mutable_searchkey() {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    searchkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.UserInfo.searchkey)
  return searchkey_;
}
inline ::std::string* BidReqMessage_UserInfo::release_searchkey() {
  clear_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = searchkey_;
    searchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage_UserInfo::set_allocated_searchkey(::std::string* searchkey) {
  if (searchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete searchkey_;
  }
  if (searchkey) {
    set_has_searchkey();
    searchkey_ = searchkey;
  } else {
    clear_has_searchkey();
    searchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.UserInfo.searchkey)
}

// -------------------------------------------------------------------

// BidReqMessage

// optional string version = 1 [default = "1.0.7"];
inline bool BidReqMessage::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidReqMessage::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidReqMessage::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidReqMessage::clear_version() {
  if (version_ != _default_version_) {
    version_->assign(*_default_version_);
  }
  clear_has_version();
}
inline const ::std::string& BidReqMessage::version() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.version)
  return *version_;
}
inline void BidReqMessage::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == _default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.version)
}
inline void BidReqMessage::set_version(const char* value) {
  set_has_version();
  if (version_ == _default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.version)
}
inline void BidReqMessage::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == _default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.version)
}
inline ::std::string* BidReqMessage::mutable_version() {
  set_has_version();
  if (version_ == _default_version_) {
    version_ = new ::std::string(*_default_version_);
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.version)
  return version_;
}
inline ::std::string* BidReqMessage::release_version() {
  clear_has_version();
  if (version_ == _default_version_) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(_default_version_);
    return temp;
  }
}
inline void BidReqMessage::set_allocated_version(::std::string* version) {
  if (version_ != _default_version_) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(_default_version_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.version)
}

// optional string requestId = 2;
inline bool BidReqMessage::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidReqMessage::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidReqMessage::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidReqMessage::clear_requestid() {
  if (requestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestid_->clear();
  }
  clear_has_requestid();
}
inline const ::std::string& BidReqMessage::requestid() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.requestId)
  return *requestid_;
}
inline void BidReqMessage::set_requestid(const ::std::string& value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.requestId)
}
inline void BidReqMessage::set_requestid(const char* value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.requestId)
}
inline void BidReqMessage::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.requestId)
}
inline ::std::string* BidReqMessage::mutable_requestid() {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.requestId)
  return requestid_;
}
inline ::std::string* BidReqMessage::release_requestid() {
  clear_has_requestid();
  if (requestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = requestid_;
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage::set_allocated_requestid(::std::string* requestid) {
  if (requestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requestid_;
  }
  if (requestid) {
    set_has_requestid();
    requestid_ = requestid;
  } else {
    clear_has_requestid();
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.requestId)
}

// optional int64 time = 3;
inline bool BidReqMessage::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidReqMessage::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidReqMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidReqMessage::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 BidReqMessage::time() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.time)
  return time_;
}
inline void BidReqMessage::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.time)
}

// optional int32 adxid = 4;
inline bool BidReqMessage::has_adxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidReqMessage::set_has_adxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidReqMessage::clear_has_adxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidReqMessage::clear_adxid() {
  adxid_ = 0;
  clear_has_adxid();
}
inline ::google::protobuf::int32 BidReqMessage::adxid() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.adxid)
  return adxid_;
}
inline void BidReqMessage::set_adxid(::google::protobuf::int32 value) {
  set_has_adxid();
  adxid_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.adxid)
}

// repeated .com.pxene.proto.BidReqMessage.Impression imp = 5;
inline int BidReqMessage::imp_size() const {
  return imp_.size();
}
inline void BidReqMessage::clear_imp() {
  imp_.Clear();
}
inline const ::com::pxene::proto::BidReqMessage_Impression& BidReqMessage::imp(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.imp)
  return imp_.Get(index);
}
inline ::com::pxene::proto::BidReqMessage_Impression* BidReqMessage::mutable_imp(int index) {
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.imp)
  return imp_.Mutable(index);
}
inline ::com::pxene::proto::BidReqMessage_Impression* BidReqMessage::add_imp() {
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.imp)
  return imp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Impression >&
BidReqMessage::imp() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.imp)
  return imp_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::pxene::proto::BidReqMessage_Impression >*
BidReqMessage::mutable_imp() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.imp)
  return &imp_;
}

// optional .com.pxene.proto.BidReqMessage.App app = 6;
inline bool BidReqMessage::has_app() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidReqMessage::set_has_app() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidReqMessage::clear_has_app() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidReqMessage::clear_app() {
  if (app_ != NULL) app_->::com::pxene::proto::BidReqMessage_App::Clear();
  clear_has_app();
}
inline const ::com::pxene::proto::BidReqMessage_App& BidReqMessage::app() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.app)
  return app_ != NULL ? *app_ : *default_instance_->app_;
}
inline ::com::pxene::proto::BidReqMessage_App* BidReqMessage::mutable_app() {
  set_has_app();
  if (app_ == NULL) app_ = new ::com::pxene::proto::BidReqMessage_App;
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.app)
  return app_;
}
inline ::com::pxene::proto::BidReqMessage_App* BidReqMessage::release_app() {
  clear_has_app();
  ::com::pxene::proto::BidReqMessage_App* temp = app_;
  app_ = NULL;
  return temp;
}
inline void BidReqMessage::set_allocated_app(::com::pxene::proto::BidReqMessage_App* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.app)
}

// optional .com.pxene.proto.BidReqMessage.Device device = 7;
inline bool BidReqMessage::has_device() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidReqMessage::set_has_device() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidReqMessage::clear_has_device() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidReqMessage::clear_device() {
  if (device_ != NULL) device_->::com::pxene::proto::BidReqMessage_Device::Clear();
  clear_has_device();
}
inline const ::com::pxene::proto::BidReqMessage_Device& BidReqMessage::device() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::com::pxene::proto::BidReqMessage_Device* BidReqMessage::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::com::pxene::proto::BidReqMessage_Device;
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.device)
  return device_;
}
inline ::com::pxene::proto::BidReqMessage_Device* BidReqMessage::release_device() {
  clear_has_device();
  ::com::pxene::proto::BidReqMessage_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void BidReqMessage::set_allocated_device(::com::pxene::proto::BidReqMessage_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.device)
}

// optional .com.pxene.proto.BidReqMessage.UserInfo userInfo = 8;
inline bool BidReqMessage::has_userinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidReqMessage::set_has_userinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidReqMessage::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidReqMessage::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::com::pxene::proto::BidReqMessage_UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::com::pxene::proto::BidReqMessage_UserInfo& BidReqMessage::userinfo() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.userInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::com::pxene::proto::BidReqMessage_UserInfo* BidReqMessage::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::com::pxene::proto::BidReqMessage_UserInfo;
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.userInfo)
  return userinfo_;
}
inline ::com::pxene::proto::BidReqMessage_UserInfo* BidReqMessage::release_userinfo() {
  clear_has_userinfo();
  ::com::pxene::proto::BidReqMessage_UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void BidReqMessage::set_allocated_userinfo(::com::pxene::proto::BidReqMessage_UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.userInfo)
}

// repeated int32 bcat = 9;
inline int BidReqMessage::bcat_size() const {
  return bcat_.size();
}
inline void BidReqMessage::clear_bcat() {
  bcat_.Clear();
}
inline ::google::protobuf::int32 BidReqMessage::bcat(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.bcat)
  return bcat_.Get(index);
}
inline void BidReqMessage::set_bcat(int index, ::google::protobuf::int32 value) {
  bcat_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.bcat)
}
inline void BidReqMessage::add_bcat(::google::protobuf::int32 value) {
  bcat_.Add(value);
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.bcat)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidReqMessage::bcat() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.bcat)
  return bcat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidReqMessage::mutable_bcat() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.bcat)
  return &bcat_;
}

// repeated string badv = 10;
inline int BidReqMessage::badv_size() const {
  return badv_.size();
}
inline void BidReqMessage::clear_badv() {
  badv_.Clear();
}
inline const ::std::string& BidReqMessage::badv(int index) const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.badv)
  return badv_.Get(index);
}
inline ::std::string* BidReqMessage::mutable_badv(int index) {
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.badv)
  return badv_.Mutable(index);
}
inline void BidReqMessage::set_badv(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.badv)
  badv_.Mutable(index)->assign(value);
}
inline void BidReqMessage::set_badv(int index, const char* value) {
  badv_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.badv)
}
inline void BidReqMessage::set_badv(int index, const char* value, size_t size) {
  badv_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.badv)
}
inline ::std::string* BidReqMessage::add_badv() {
  return badv_.Add();
}
inline void BidReqMessage::add_badv(const ::std::string& value) {
  badv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.pxene.proto.BidReqMessage.badv)
}
inline void BidReqMessage::add_badv(const char* value) {
  badv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.pxene.proto.BidReqMessage.badv)
}
inline void BidReqMessage::add_badv(const char* value, size_t size) {
  badv_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.pxene.proto.BidReqMessage.badv)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidReqMessage::badv() const {
  // @@protoc_insertion_point(field_list:com.pxene.proto.BidReqMessage.badv)
  return badv_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidReqMessage::mutable_badv() {
  // @@protoc_insertion_point(field_mutable_list:com.pxene.proto.BidReqMessage.badv)
  return &badv_;
}

// optional bool isRecommend = 11;
inline bool BidReqMessage::has_isrecommend() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidReqMessage::set_has_isrecommend() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidReqMessage::clear_has_isrecommend() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidReqMessage::clear_isrecommend() {
  isrecommend_ = false;
  clear_has_isrecommend();
}
inline bool BidReqMessage::isrecommend() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.isRecommend)
  return isrecommend_;
}
inline void BidReqMessage::set_isrecommend(bool value) {
  set_has_isrecommend();
  isrecommend_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.isRecommend)
}

// optional int32 at = 12;
inline bool BidReqMessage::has_at() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidReqMessage::set_has_at() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidReqMessage::clear_has_at() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidReqMessage::clear_at() {
  at_ = 0;
  clear_has_at();
}
inline ::google::protobuf::int32 BidReqMessage::at() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.at)
  return at_;
}
inline void BidReqMessage::set_at(::google::protobuf::int32 value) {
  set_has_at();
  at_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.at)
}

// optional int32 support_deep_link = 13;
inline bool BidReqMessage::has_support_deep_link() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidReqMessage::set_has_support_deep_link() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidReqMessage::clear_has_support_deep_link() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidReqMessage::clear_support_deep_link() {
  support_deep_link_ = 0;
  clear_has_support_deep_link();
}
inline ::google::protobuf::int32 BidReqMessage::support_deep_link() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.support_deep_link)
  return support_deep_link_;
}
inline void BidReqMessage::set_support_deep_link(::google::protobuf::int32 value) {
  set_has_support_deep_link();
  support_deep_link_ = value;
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.support_deep_link)
}

// optional string bid_server_flag = 14;
inline bool BidReqMessage::has_bid_server_flag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidReqMessage::set_has_bid_server_flag() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidReqMessage::clear_has_bid_server_flag() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidReqMessage::clear_bid_server_flag() {
  if (bid_server_flag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_server_flag_->clear();
  }
  clear_has_bid_server_flag();
}
inline const ::std::string& BidReqMessage::bid_server_flag() const {
  // @@protoc_insertion_point(field_get:com.pxene.proto.BidReqMessage.bid_server_flag)
  return *bid_server_flag_;
}
inline void BidReqMessage::set_bid_server_flag(const ::std::string& value) {
  set_has_bid_server_flag();
  if (bid_server_flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_server_flag_ = new ::std::string;
  }
  bid_server_flag_->assign(value);
  // @@protoc_insertion_point(field_set:com.pxene.proto.BidReqMessage.bid_server_flag)
}
inline void BidReqMessage::set_bid_server_flag(const char* value) {
  set_has_bid_server_flag();
  if (bid_server_flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_server_flag_ = new ::std::string;
  }
  bid_server_flag_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.pxene.proto.BidReqMessage.bid_server_flag)
}
inline void BidReqMessage::set_bid_server_flag(const char* value, size_t size) {
  set_has_bid_server_flag();
  if (bid_server_flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_server_flag_ = new ::std::string;
  }
  bid_server_flag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.pxene.proto.BidReqMessage.bid_server_flag)
}
inline ::std::string* BidReqMessage::mutable_bid_server_flag() {
  set_has_bid_server_flag();
  if (bid_server_flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_server_flag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.pxene.proto.BidReqMessage.bid_server_flag)
  return bid_server_flag_;
}
inline ::std::string* BidReqMessage::release_bid_server_flag() {
  clear_has_bid_server_flag();
  if (bid_server_flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_server_flag_;
    bid_server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidReqMessage::set_allocated_bid_server_flag(::std::string* bid_server_flag) {
  if (bid_server_flag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_server_flag_;
  }
  if (bid_server_flag) {
    set_has_bid_server_flag();
    bid_server_flag_ = bid_server_flag;
  } else {
    clear_has_bid_server_flag();
    bid_server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.pxene.proto.BidReqMessage.bid_server_flag)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pxene
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bid_5finfo_2eproto__INCLUDED
