// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bid_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bid_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace pxene {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* BidReqMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReqMessage_Impression_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_Impression_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReqMessage_Impression_Banner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_Impression_Banner_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReqMessage_Impression_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_Impression_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReqMessage_Impression_NativeAd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_Impression_NativeAd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReqMessage_Impression_NativeAd_AssetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_Impression_NativeAd_AssetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReqMessage_Impression_Ext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_Impression_Ext_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReqMessage_App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_App_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReqMessage_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReqMessage_Device_DeviceIdPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_Device_DeviceIdPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReqMessage_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReqMessage_UserInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bid_5finfo_2eproto() {
  protobuf_AddDesc_bid_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bid_info.proto");
  GOOGLE_CHECK(file != NULL);
  BidReqMessage_descriptor_ = file->message_type(0);
  static const int BidReqMessage_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, adxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, imp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, bcat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, badv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, isrecommend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, support_deep_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, bid_server_flag_),
  };
  BidReqMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_descriptor_,
      BidReqMessage::default_instance_,
      BidReqMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage));
  BidReqMessage_Impression_descriptor_ = BidReqMessage_descriptor_->nested_type(0);
  static const int BidReqMessage_Impression_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, dobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, nativead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, bidfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, bidfloorcur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, adpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, selmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, track_url_par_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, curl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, monitorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, imonitorurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, cmonitorurl_),
  };
  BidReqMessage_Impression_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_Impression_descriptor_,
      BidReqMessage_Impression::default_instance_,
      BidReqMessage_Impression_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage_Impression));
  BidReqMessage_Impression_Banner_descriptor_ = BidReqMessage_Impression_descriptor_->nested_type(0);
  static const int BidReqMessage_Impression_Banner_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Banner, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Banner, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Banner, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Banner, battr_),
  };
  BidReqMessage_Impression_Banner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_Impression_Banner_descriptor_,
      BidReqMessage_Impression_Banner::default_instance_,
      BidReqMessage_Impression_Banner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Banner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Banner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage_Impression_Banner));
  BidReqMessage_Impression_Video_descriptor_ = BidReqMessage_Impression_descriptor_->nested_type(1);
  static const int BidReqMessage_Impression_Video_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Video, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Video, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Video, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Video, minduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Video, maxduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Video, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Video, battr_),
  };
  BidReqMessage_Impression_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_Impression_Video_descriptor_,
      BidReqMessage_Impression_Video::default_instance_,
      BidReqMessage_Impression_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage_Impression_Video));
  BidReqMessage_Impression_NativeAd_descriptor_ = BidReqMessage_Impression_descriptor_->nested_type(2);
  static const int BidReqMessage_Impression_NativeAd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd, plcmtcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd, asset_),
  };
  BidReqMessage_Impression_NativeAd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_Impression_NativeAd_descriptor_,
      BidReqMessage_Impression_NativeAd::default_instance_,
      BidReqMessage_Impression_NativeAd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage_Impression_NativeAd));
  BidReqMessage_Impression_NativeAd_AssetInfo_descriptor_ = BidReqMessage_Impression_NativeAd_descriptor_->nested_type(0);
  static const int BidReqMessage_Impression_NativeAd_AssetInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, requiredflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, titlelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, imagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, imagew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, imagewmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, imageh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, imagehmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, imagemimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, datalen_),
  };
  BidReqMessage_Impression_NativeAd_AssetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_Impression_NativeAd_AssetInfo_descriptor_,
      BidReqMessage_Impression_NativeAd_AssetInfo::default_instance_,
      BidReqMessage_Impression_NativeAd_AssetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_NativeAd_AssetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage_Impression_NativeAd_AssetInfo));
  BidReqMessage_Impression_Ext_descriptor_ = BidReqMessage_Impression_descriptor_->nested_type(3);
  static const int BidReqMessage_Impression_Ext_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Ext, instl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Ext, splash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Ext, advid_),
  };
  BidReqMessage_Impression_Ext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_Impression_Ext_descriptor_,
      BidReqMessage_Impression_Ext::default_instance_,
      BidReqMessage_Impression_Ext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Ext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Impression_Ext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage_Impression_Ext));
  BidReqMessage_App_descriptor_ = BidReqMessage_descriptor_->nested_type(1);
  static const int BidReqMessage_App_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_App, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_App, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_App, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_App, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_App, storeurl_),
  };
  BidReqMessage_App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_App_descriptor_,
      BidReqMessage_App::default_instance_,
      BidReqMessage_App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage_App));
  BidReqMessage_Device_descriptor_ = BidReqMessage_descriptor_->nested_type(2);
  static const int BidReqMessage_Device_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, dids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, dpids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, geolat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, geolon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, make_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, makestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, osv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, devicetype_),
  };
  BidReqMessage_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_Device_descriptor_,
      BidReqMessage_Device::default_instance_,
      BidReqMessage_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage_Device));
  BidReqMessage_Device_DeviceIdPair_descriptor_ = BidReqMessage_Device_descriptor_->nested_type(0);
  static const int BidReqMessage_Device_DeviceIdPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device_DeviceIdPair, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device_DeviceIdPair, id_),
  };
  BidReqMessage_Device_DeviceIdPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_Device_DeviceIdPair_descriptor_,
      BidReqMessage_Device_DeviceIdPair::default_instance_,
      BidReqMessage_Device_DeviceIdPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device_DeviceIdPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_Device_DeviceIdPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage_Device_DeviceIdPair));
  BidReqMessage_UserInfo_descriptor_ = BidReqMessage_descriptor_->nested_type(3);
  static const int BidReqMessage_UserInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_UserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_UserInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_UserInfo, yob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_UserInfo, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_UserInfo, geolat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_UserInfo, geolon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_UserInfo, searchkey_),
  };
  BidReqMessage_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidReqMessage_UserInfo_descriptor_,
      BidReqMessage_UserInfo::default_instance_,
      BidReqMessage_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReqMessage_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidReqMessage_UserInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bid_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_descriptor_, &BidReqMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_Impression_descriptor_, &BidReqMessage_Impression::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_Impression_Banner_descriptor_, &BidReqMessage_Impression_Banner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_Impression_Video_descriptor_, &BidReqMessage_Impression_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_Impression_NativeAd_descriptor_, &BidReqMessage_Impression_NativeAd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_Impression_NativeAd_AssetInfo_descriptor_, &BidReqMessage_Impression_NativeAd_AssetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_Impression_Ext_descriptor_, &BidReqMessage_Impression_Ext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_App_descriptor_, &BidReqMessage_App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_Device_descriptor_, &BidReqMessage_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_Device_DeviceIdPair_descriptor_, &BidReqMessage_Device_DeviceIdPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidReqMessage_UserInfo_descriptor_, &BidReqMessage_UserInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bid_5finfo_2eproto() {
  delete BidReqMessage::default_instance_;
  delete BidReqMessage_reflection_;
  delete BidReqMessage::_default_version_;
  delete BidReqMessage_Impression::default_instance_;
  delete BidReqMessage_Impression_reflection_;
  delete BidReqMessage_Impression_Banner::default_instance_;
  delete BidReqMessage_Impression_Banner_reflection_;
  delete BidReqMessage_Impression_Video::default_instance_;
  delete BidReqMessage_Impression_Video_reflection_;
  delete BidReqMessage_Impression_NativeAd::default_instance_;
  delete BidReqMessage_Impression_NativeAd_reflection_;
  delete BidReqMessage_Impression_NativeAd_AssetInfo::default_instance_;
  delete BidReqMessage_Impression_NativeAd_AssetInfo_reflection_;
  delete BidReqMessage_Impression_Ext::default_instance_;
  delete BidReqMessage_Impression_Ext_reflection_;
  delete BidReqMessage_App::default_instance_;
  delete BidReqMessage_App_reflection_;
  delete BidReqMessage_Device::default_instance_;
  delete BidReqMessage_Device_reflection_;
  delete BidReqMessage_Device_DeviceIdPair::default_instance_;
  delete BidReqMessage_Device_DeviceIdPair_reflection_;
  delete BidReqMessage_UserInfo::default_instance_;
  delete BidReqMessage_UserInfo_reflection_;
}

void protobuf_AddDesc_bid_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016bid_info.proto\022\017com.pxene.proto\"\263\020\n\rBi"
    "dReqMessage\022\026\n\007version\030\001 \001(\t:\0051.0.7\022\021\n\tr"
    "equestId\030\002 \001(\t\022\014\n\004time\030\003 \001(\003\022\r\n\005adxid\030\004 "
    "\001(\005\0226\n\003imp\030\005 \003(\0132).com.pxene.proto.BidRe"
    "qMessage.Impression\022/\n\003app\030\006 \001(\0132\".com.p"
    "xene.proto.BidReqMessage.App\0225\n\006device\030\007"
    " \001(\0132%.com.pxene.proto.BidReqMessage.Dev"
    "ice\0229\n\010userInfo\030\010 \001(\0132\'.com.pxene.proto."
    "BidReqMessage.UserInfo\022\014\n\004bcat\030\t \003(\005\022\014\n\004"
    "badv\030\n \003(\t\022\023\n\013isRecommend\030\013 \001(\010\022\n\n\002at\030\014 "
    "\001(\005\022\031\n\021support_deep_link\030\r \001(\005\022\027\n\017bid_se"
    "rver_flag\030\016 \001(\t\032\273\010\n\nImpression\022\n\n\002id\030\001 \001"
    "(\t\022\014\n\004type\030\002 \001(\005\022\r\n\005doBid\030\003 \001(\010\022@\n\006banne"
    "r\030\004 \001(\01320.com.pxene.proto.BidReqMessage."
    "Impression.Banner\022>\n\005video\030\005 \001(\0132/.com.p"
    "xene.proto.BidReqMessage.Impression.Vide"
    "o\022D\n\010nativeAd\030\006 \001(\01322.com.pxene.proto.Bi"
    "dReqMessage.Impression.NativeAd\022\020\n\010bidFl"
    "oor\030\007 \001(\005\022\023\n\013bidFloorCur\030\010 \001(\t\022\r\n\005adPos\030"
    "\t \001(\005\022:\n\003ext\030\n \001(\0132-.com.pxene.proto.Bid"
    "ReqMessage.Impression.Ext\022\020\n\010selMapid\030\013 "
    "\001(\005\022\r\n\005price\030\014 \001(\005\022\025\n\rtrack_url_par\030\r \001("
    "\t\022\014\n\004curl\030\016 \001(\t\022\023\n\013monitorcode\030\017 \001(\t\022\023\n\013"
    "imonitorurl\030\020 \003(\t\022\023\n\013cmonitorurl\030\021 \003(\t\032<"
    "\n\006Banner\022\t\n\001w\030\001 \001(\005\022\t\n\001h\030\002 \001(\005\022\r\n\005btype\030"
    "\003 \003(\005\022\r\n\005battr\030\004 \003(\005\032v\n\005Video\022\t\n\001w\030\001 \001(\005"
    "\022\t\n\001h\030\002 \001(\005\022\017\n\007display\030\003 \001(\005\022\023\n\013mindurat"
    "ion\030\004 \001(\005\022\023\n\013maxduration\030\005 \001(\005\022\r\n\005mimes\030"
    "\006 \003(\005\022\r\n\005battr\030\007 \003(\005\032\331\002\n\010NativeAd\022\016\n\006lay"
    "out\030\001 \001(\005\022\020\n\010plcmtcnt\030\002 \001(\005\022K\n\005asset\030\003 \003"
    "(\0132<.com.pxene.proto.BidReqMessage.Impre"
    "ssion.NativeAd.AssetInfo\032\335\001\n\tAssetInfo\022\n"
    "\n\002id\030\001 \002(\003\022\024\n\014requiredFlag\030\002 \002(\005\022\014\n\004type"
    "\030\003 \002(\005\022\020\n\010titleLen\030\004 \001(\005\022\021\n\timageType\030\005 "
    "\001(\005\022\016\n\006imageW\030\006 \001(\005\022\021\n\timageWMin\030\007 \001(\005\022\016"
    "\n\006imageH\030\010 \001(\005\022\021\n\timageHMin\030\t \001(\005\022\022\n\nima"
    "geMimes\030\n \003(\005\022\020\n\010dataType\030\013 \001(\005\022\017\n\007dataL"
    "en\030\014 \001(\005\0323\n\003Ext\022\r\n\005instl\030\001 \001(\005\022\016\n\006splash"
    "\030\002 \001(\005\022\r\n\005advid\030\003 \001(\005\032N\n\003App\022\n\n\002id\030\001 \001(\t"
    "\022\014\n\004name\030\002 \001(\t\022\013\n\003cat\030\003 \003(\005\022\016\n\006bundle\030\004 "
    "\001(\t\022\020\n\010storeurl\030\005 \001(\t\032\205\003\n\006Device\022@\n\004dids"
    "\030\001 \003(\01322.com.pxene.proto.BidReqMessage.D"
    "evice.DeviceIdPair\022A\n\005dpids\030\002 \003(\01322.com."
    "pxene.proto.BidReqMessage.Device.DeviceI"
    "dPair\022\n\n\002ua\030\003 \001(\t\022\020\n\010location\030\004 \001(\005\022\n\n\002i"
    "p\030\005 \001(\t\022\016\n\006geoLat\030\006 \001(\001\022\016\n\006geoLon\030\007 \001(\001\022"
    "\017\n\007carrier\030\010 \001(\005\022\014\n\004make\030\t \001(\005\022\017\n\007makest"
    "r\030\n \001(\t\022\r\n\005model\030\013 \001(\t\022\n\n\002os\030\014 \001(\005\022\013\n\003os"
    "v\030\r \001(\t\022\026\n\016connectionType\030\016 \001(\005\022\022\n\ndevic"
    "eType\030\017 \001(\005\032(\n\014DeviceIdPair\022\014\n\004type\030\001 \002("
    "\005\022\n\n\002id\030\002 \002(\t\032x\n\010UserInfo\022\n\n\002id\030\001 \001(\t\022\016\n"
    "\006gender\030\002 \001(\005\022\013\n\003yob\030\003 \001(\005\022\020\n\010keywords\030\004"
    " \001(\t\022\016\n\006geoLat\030\005 \001(\001\022\016\n\006geoLon\030\006 \001(\001\022\021\n\t"
    "searchkey\030\007 \001(\t", 2135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bid_info.proto", &protobuf_RegisterTypes);
  BidReqMessage::_default_version_ =
      new ::std::string("1.0.7", 5);
  BidReqMessage::default_instance_ = new BidReqMessage();
  BidReqMessage_Impression::default_instance_ = new BidReqMessage_Impression();
  BidReqMessage_Impression_Banner::default_instance_ = new BidReqMessage_Impression_Banner();
  BidReqMessage_Impression_Video::default_instance_ = new BidReqMessage_Impression_Video();
  BidReqMessage_Impression_NativeAd::default_instance_ = new BidReqMessage_Impression_NativeAd();
  BidReqMessage_Impression_NativeAd_AssetInfo::default_instance_ = new BidReqMessage_Impression_NativeAd_AssetInfo();
  BidReqMessage_Impression_Ext::default_instance_ = new BidReqMessage_Impression_Ext();
  BidReqMessage_App::default_instance_ = new BidReqMessage_App();
  BidReqMessage_Device::default_instance_ = new BidReqMessage_Device();
  BidReqMessage_Device_DeviceIdPair::default_instance_ = new BidReqMessage_Device_DeviceIdPair();
  BidReqMessage_UserInfo::default_instance_ = new BidReqMessage_UserInfo();
  BidReqMessage::default_instance_->InitAsDefaultInstance();
  BidReqMessage_Impression::default_instance_->InitAsDefaultInstance();
  BidReqMessage_Impression_Banner::default_instance_->InitAsDefaultInstance();
  BidReqMessage_Impression_Video::default_instance_->InitAsDefaultInstance();
  BidReqMessage_Impression_NativeAd::default_instance_->InitAsDefaultInstance();
  BidReqMessage_Impression_NativeAd_AssetInfo::default_instance_->InitAsDefaultInstance();
  BidReqMessage_Impression_Ext::default_instance_->InitAsDefaultInstance();
  BidReqMessage_App::default_instance_->InitAsDefaultInstance();
  BidReqMessage_Device::default_instance_->InitAsDefaultInstance();
  BidReqMessage_Device_DeviceIdPair::default_instance_->InitAsDefaultInstance();
  BidReqMessage_UserInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bid_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bid_5finfo_2eproto {
  StaticDescriptorInitializer_bid_5finfo_2eproto() {
    protobuf_AddDesc_bid_5finfo_2eproto();
  }
} static_descriptor_initializer_bid_5finfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BidReqMessage_Impression_Banner::kWFieldNumber;
const int BidReqMessage_Impression_Banner::kHFieldNumber;
const int BidReqMessage_Impression_Banner::kBtypeFieldNumber;
const int BidReqMessage_Impression_Banner::kBattrFieldNumber;
#endif  // !_MSC_VER

BidReqMessage_Impression_Banner::BidReqMessage_Impression_Banner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage.Impression.Banner)
}

void BidReqMessage_Impression_Banner::InitAsDefaultInstance() {
}

BidReqMessage_Impression_Banner::BidReqMessage_Impression_Banner(const BidReqMessage_Impression_Banner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage.Impression.Banner)
}

void BidReqMessage_Impression_Banner::SharedCtor() {
  _cached_size_ = 0;
  w_ = 0;
  h_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage_Impression_Banner::~BidReqMessage_Impression_Banner() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage.Impression.Banner)
  SharedDtor();
}

void BidReqMessage_Impression_Banner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidReqMessage_Impression_Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage_Impression_Banner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_Impression_Banner_descriptor_;
}

const BidReqMessage_Impression_Banner& BidReqMessage_Impression_Banner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage_Impression_Banner* BidReqMessage_Impression_Banner::default_instance_ = NULL;

BidReqMessage_Impression_Banner* BidReqMessage_Impression_Banner::New() const {
  return new BidReqMessage_Impression_Banner;
}

void BidReqMessage_Impression_Banner::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidReqMessage_Impression_Banner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(w_, h_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  btype_.Clear();
  battr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage_Impression_Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage.Impression.Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 w = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_h;
        break;
      }

      // optional int32 h = 2;
      case 2: {
        if (tag == 16) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_btype;
        break;
      }

      // repeated int32 btype = 3;
      case 3: {
        if (tag == 24) {
         parse_btype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_btype())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_btype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_btype;
        if (input->ExpectTag(32)) goto parse_battr;
        break;
      }

      // repeated int32 battr = 4;
      case 4: {
        if (tag == 32) {
         parse_battr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_battr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_battr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_battr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage.Impression.Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage.Impression.Banner)
  return false;
#undef DO_
}

void BidReqMessage_Impression_Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage.Impression.Banner)
  // optional int32 w = 1;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->w(), output);
  }

  // optional int32 h = 2;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->h(), output);
  }

  // repeated int32 btype = 3;
  for (int i = 0; i < this->btype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->btype(i), output);
  }

  // repeated int32 battr = 4;
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->battr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage.Impression.Banner)
}

::google::protobuf::uint8* BidReqMessage_Impression_Banner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage.Impression.Banner)
  // optional int32 w = 1;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->w(), target);
  }

  // optional int32 h = 2;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->h(), target);
  }

  // repeated int32 btype = 3;
  for (int i = 0; i < this->btype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->btype(i), target);
  }

  // repeated int32 battr = 4;
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->battr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage.Impression.Banner)
  return target;
}

int BidReqMessage_Impression_Banner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 w = 1;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 2;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

  }
  // repeated int32 btype = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->btype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->btype(i));
    }
    total_size += 1 * this->btype_size() + data_size;
  }

  // repeated int32 battr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->battr(i));
    }
    total_size += 1 * this->battr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage_Impression_Banner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage_Impression_Banner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage_Impression_Banner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage_Impression_Banner::MergeFrom(const BidReqMessage_Impression_Banner& from) {
  GOOGLE_CHECK_NE(&from, this);
  btype_.MergeFrom(from.btype_);
  battr_.MergeFrom(from.battr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage_Impression_Banner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage_Impression_Banner::CopyFrom(const BidReqMessage_Impression_Banner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage_Impression_Banner::IsInitialized() const {

  return true;
}

void BidReqMessage_Impression_Banner::Swap(BidReqMessage_Impression_Banner* other) {
  if (other != this) {
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    btype_.Swap(&other->btype_);
    battr_.Swap(&other->battr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage_Impression_Banner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_Impression_Banner_descriptor_;
  metadata.reflection = BidReqMessage_Impression_Banner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidReqMessage_Impression_Video::kWFieldNumber;
const int BidReqMessage_Impression_Video::kHFieldNumber;
const int BidReqMessage_Impression_Video::kDisplayFieldNumber;
const int BidReqMessage_Impression_Video::kMindurationFieldNumber;
const int BidReqMessage_Impression_Video::kMaxdurationFieldNumber;
const int BidReqMessage_Impression_Video::kMimesFieldNumber;
const int BidReqMessage_Impression_Video::kBattrFieldNumber;
#endif  // !_MSC_VER

BidReqMessage_Impression_Video::BidReqMessage_Impression_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage.Impression.Video)
}

void BidReqMessage_Impression_Video::InitAsDefaultInstance() {
}

BidReqMessage_Impression_Video::BidReqMessage_Impression_Video(const BidReqMessage_Impression_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage.Impression.Video)
}

void BidReqMessage_Impression_Video::SharedCtor() {
  _cached_size_ = 0;
  w_ = 0;
  h_ = 0;
  display_ = 0;
  minduration_ = 0;
  maxduration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage_Impression_Video::~BidReqMessage_Impression_Video() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage.Impression.Video)
  SharedDtor();
}

void BidReqMessage_Impression_Video::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidReqMessage_Impression_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage_Impression_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_Impression_Video_descriptor_;
}

const BidReqMessage_Impression_Video& BidReqMessage_Impression_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage_Impression_Video* BidReqMessage_Impression_Video::default_instance_ = NULL;

BidReqMessage_Impression_Video* BidReqMessage_Impression_Video::New() const {
  return new BidReqMessage_Impression_Video;
}

void BidReqMessage_Impression_Video::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidReqMessage_Impression_Video*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(w_, minduration_);
    maxduration_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mimes_.Clear();
  battr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage_Impression_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage.Impression.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 w = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_h;
        break;
      }

      // optional int32 h = 2;
      case 2: {
        if (tag == 16) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_display;
        break;
      }

      // optional int32 display = 3;
      case 3: {
        if (tag == 24) {
         parse_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
          set_has_display();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_minduration;
        break;
      }

      // optional int32 minduration = 4;
      case 4: {
        if (tag == 32) {
         parse_minduration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minduration_)));
          set_has_minduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxduration;
        break;
      }

      // optional int32 maxduration = 5;
      case 5: {
        if (tag == 40) {
         parse_maxduration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxduration_)));
          set_has_maxduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mimes;
        break;
      }

      // repeated int32 mimes = 6;
      case 6: {
        if (tag == 48) {
         parse_mimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_mimes())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mimes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mimes;
        if (input->ExpectTag(56)) goto parse_battr;
        break;
      }

      // repeated int32 battr = 7;
      case 7: {
        if (tag == 56) {
         parse_battr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_battr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_battr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_battr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage.Impression.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage.Impression.Video)
  return false;
#undef DO_
}

void BidReqMessage_Impression_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage.Impression.Video)
  // optional int32 w = 1;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->w(), output);
  }

  // optional int32 h = 2;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->h(), output);
  }

  // optional int32 display = 3;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->display(), output);
  }

  // optional int32 minduration = 4;
  if (has_minduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minduration(), output);
  }

  // optional int32 maxduration = 5;
  if (has_maxduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxduration(), output);
  }

  // repeated int32 mimes = 6;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->mimes(i), output);
  }

  // repeated int32 battr = 7;
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->battr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage.Impression.Video)
}

::google::protobuf::uint8* BidReqMessage_Impression_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage.Impression.Video)
  // optional int32 w = 1;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->w(), target);
  }

  // optional int32 h = 2;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->h(), target);
  }

  // optional int32 display = 3;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->display(), target);
  }

  // optional int32 minduration = 4;
  if (has_minduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minduration(), target);
  }

  // optional int32 maxduration = 5;
  if (has_maxduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxduration(), target);
  }

  // repeated int32 mimes = 6;
  for (int i = 0; i < this->mimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->mimes(i), target);
  }

  // repeated int32 battr = 7;
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->battr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage.Impression.Video)
  return target;
}

int BidReqMessage_Impression_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 w = 1;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 2;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 display = 3;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

    // optional int32 minduration = 4;
    if (has_minduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minduration());
    }

    // optional int32 maxduration = 5;
    if (has_maxduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxduration());
    }

  }
  // repeated int32 mimes = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->mimes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mimes(i));
    }
    total_size += 1 * this->mimes_size() + data_size;
  }

  // repeated int32 battr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->battr(i));
    }
    total_size += 1 * this->battr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage_Impression_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage_Impression_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage_Impression_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage_Impression_Video::MergeFrom(const BidReqMessage_Impression_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  mimes_.MergeFrom(from.mimes_);
  battr_.MergeFrom(from.battr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_minduration()) {
      set_minduration(from.minduration());
    }
    if (from.has_maxduration()) {
      set_maxduration(from.maxduration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage_Impression_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage_Impression_Video::CopyFrom(const BidReqMessage_Impression_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage_Impression_Video::IsInitialized() const {

  return true;
}

void BidReqMessage_Impression_Video::Swap(BidReqMessage_Impression_Video* other) {
  if (other != this) {
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(display_, other->display_);
    std::swap(minduration_, other->minduration_);
    std::swap(maxduration_, other->maxduration_);
    mimes_.Swap(&other->mimes_);
    battr_.Swap(&other->battr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage_Impression_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_Impression_Video_descriptor_;
  metadata.reflection = BidReqMessage_Impression_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidReqMessage_Impression_NativeAd_AssetInfo::kIdFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kRequiredFlagFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kTypeFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kTitleLenFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kImageTypeFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kImageWFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kImageWMinFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kImageHFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kImageHMinFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kImageMimesFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kDataTypeFieldNumber;
const int BidReqMessage_Impression_NativeAd_AssetInfo::kDataLenFieldNumber;
#endif  // !_MSC_VER

BidReqMessage_Impression_NativeAd_AssetInfo::BidReqMessage_Impression_NativeAd_AssetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
}

void BidReqMessage_Impression_NativeAd_AssetInfo::InitAsDefaultInstance() {
}

BidReqMessage_Impression_NativeAd_AssetInfo::BidReqMessage_Impression_NativeAd_AssetInfo(const BidReqMessage_Impression_NativeAd_AssetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
}

void BidReqMessage_Impression_NativeAd_AssetInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  requiredflag_ = 0;
  type_ = 0;
  titlelen_ = 0;
  imagetype_ = 0;
  imagew_ = 0;
  imagewmin_ = 0;
  imageh_ = 0;
  imagehmin_ = 0;
  datatype_ = 0;
  datalen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage_Impression_NativeAd_AssetInfo::~BidReqMessage_Impression_NativeAd_AssetInfo() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
  SharedDtor();
}

void BidReqMessage_Impression_NativeAd_AssetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidReqMessage_Impression_NativeAd_AssetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage_Impression_NativeAd_AssetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_Impression_NativeAd_AssetInfo_descriptor_;
}

const BidReqMessage_Impression_NativeAd_AssetInfo& BidReqMessage_Impression_NativeAd_AssetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage_Impression_NativeAd_AssetInfo* BidReqMessage_Impression_NativeAd_AssetInfo::default_instance_ = NULL;

BidReqMessage_Impression_NativeAd_AssetInfo* BidReqMessage_Impression_NativeAd_AssetInfo::New() const {
  return new BidReqMessage_Impression_NativeAd_AssetInfo;
}

void BidReqMessage_Impression_NativeAd_AssetInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidReqMessage_Impression_NativeAd_AssetInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, imageh_);
  }
  if (_has_bits_[8 / 32] & 3328) {
    ZR_(datatype_, datalen_);
    imagehmin_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  imagemimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage_Impression_NativeAd_AssetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_requiredFlag;
        break;
      }

      // required int32 requiredFlag = 2;
      case 2: {
        if (tag == 16) {
         parse_requiredFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requiredflag_)));
          set_has_requiredflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_titleLen;
        break;
      }

      // optional int32 titleLen = 4;
      case 4: {
        if (tag == 32) {
         parse_titleLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titlelen_)));
          set_has_titlelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_imageType;
        break;
      }

      // optional int32 imageType = 5;
      case 5: {
        if (tag == 40) {
         parse_imageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagetype_)));
          set_has_imagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_imageW;
        break;
      }

      // optional int32 imageW = 6;
      case 6: {
        if (tag == 48) {
         parse_imageW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagew_)));
          set_has_imagew();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_imageWMin;
        break;
      }

      // optional int32 imageWMin = 7;
      case 7: {
        if (tag == 56) {
         parse_imageWMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagewmin_)));
          set_has_imagewmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_imageH;
        break;
      }

      // optional int32 imageH = 8;
      case 8: {
        if (tag == 64) {
         parse_imageH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageh_)));
          set_has_imageh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_imageHMin;
        break;
      }

      // optional int32 imageHMin = 9;
      case 9: {
        if (tag == 72) {
         parse_imageHMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagehmin_)));
          set_has_imagehmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_imageMimes;
        break;
      }

      // repeated int32 imageMimes = 10;
      case 10: {
        if (tag == 80) {
         parse_imageMimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_imagemimes())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_imagemimes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_imageMimes;
        if (input->ExpectTag(88)) goto parse_dataType;
        break;
      }

      // optional int32 dataType = 11;
      case 11: {
        if (tag == 88) {
         parse_dataType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_)));
          set_has_datatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dataLen;
        break;
      }

      // optional int32 dataLen = 12;
      case 12: {
        if (tag == 96) {
         parse_dataLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datalen_)));
          set_has_datalen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
  return false;
#undef DO_
}

void BidReqMessage_Impression_NativeAd_AssetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 requiredFlag = 2;
  if (has_requiredflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->requiredflag(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 titleLen = 4;
  if (has_titlelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->titlelen(), output);
  }

  // optional int32 imageType = 5;
  if (has_imagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->imagetype(), output);
  }

  // optional int32 imageW = 6;
  if (has_imagew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->imagew(), output);
  }

  // optional int32 imageWMin = 7;
  if (has_imagewmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->imagewmin(), output);
  }

  // optional int32 imageH = 8;
  if (has_imageh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->imageh(), output);
  }

  // optional int32 imageHMin = 9;
  if (has_imagehmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->imagehmin(), output);
  }

  // repeated int32 imageMimes = 10;
  for (int i = 0; i < this->imagemimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->imagemimes(i), output);
  }

  // optional int32 dataType = 11;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->datatype(), output);
  }

  // optional int32 dataLen = 12;
  if (has_datalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->datalen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
}

::google::protobuf::uint8* BidReqMessage_Impression_NativeAd_AssetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 requiredFlag = 2;
  if (has_requiredflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->requiredflag(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 titleLen = 4;
  if (has_titlelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->titlelen(), target);
  }

  // optional int32 imageType = 5;
  if (has_imagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->imagetype(), target);
  }

  // optional int32 imageW = 6;
  if (has_imagew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->imagew(), target);
  }

  // optional int32 imageWMin = 7;
  if (has_imagewmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->imagewmin(), target);
  }

  // optional int32 imageH = 8;
  if (has_imageh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->imageh(), target);
  }

  // optional int32 imageHMin = 9;
  if (has_imagehmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->imagehmin(), target);
  }

  // repeated int32 imageMimes = 10;
  for (int i = 0; i < this->imagemimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->imagemimes(i), target);
  }

  // optional int32 dataType = 11;
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->datatype(), target);
  }

  // optional int32 dataLen = 12;
  if (has_datalen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->datalen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo)
  return target;
}

int BidReqMessage_Impression_NativeAd_AssetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 requiredFlag = 2;
    if (has_requiredflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requiredflag());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 titleLen = 4;
    if (has_titlelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titlelen());
    }

    // optional int32 imageType = 5;
    if (has_imagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagetype());
    }

    // optional int32 imageW = 6;
    if (has_imagew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagew());
    }

    // optional int32 imageWMin = 7;
    if (has_imagewmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagewmin());
    }

    // optional int32 imageH = 8;
    if (has_imageh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imageh());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 imageHMin = 9;
    if (has_imagehmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagehmin());
    }

    // optional int32 dataType = 11;
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatype());
    }

    // optional int32 dataLen = 12;
    if (has_datalen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datalen());
    }

  }
  // repeated int32 imageMimes = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->imagemimes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->imagemimes(i));
    }
    total_size += 1 * this->imagemimes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage_Impression_NativeAd_AssetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage_Impression_NativeAd_AssetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage_Impression_NativeAd_AssetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage_Impression_NativeAd_AssetInfo::MergeFrom(const BidReqMessage_Impression_NativeAd_AssetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  imagemimes_.MergeFrom(from.imagemimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_requiredflag()) {
      set_requiredflag(from.requiredflag());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_titlelen()) {
      set_titlelen(from.titlelen());
    }
    if (from.has_imagetype()) {
      set_imagetype(from.imagetype());
    }
    if (from.has_imagew()) {
      set_imagew(from.imagew());
    }
    if (from.has_imagewmin()) {
      set_imagewmin(from.imagewmin());
    }
    if (from.has_imageh()) {
      set_imageh(from.imageh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imagehmin()) {
      set_imagehmin(from.imagehmin());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_datalen()) {
      set_datalen(from.datalen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage_Impression_NativeAd_AssetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage_Impression_NativeAd_AssetInfo::CopyFrom(const BidReqMessage_Impression_NativeAd_AssetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage_Impression_NativeAd_AssetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BidReqMessage_Impression_NativeAd_AssetInfo::Swap(BidReqMessage_Impression_NativeAd_AssetInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(requiredflag_, other->requiredflag_);
    std::swap(type_, other->type_);
    std::swap(titlelen_, other->titlelen_);
    std::swap(imagetype_, other->imagetype_);
    std::swap(imagew_, other->imagew_);
    std::swap(imagewmin_, other->imagewmin_);
    std::swap(imageh_, other->imageh_);
    std::swap(imagehmin_, other->imagehmin_);
    imagemimes_.Swap(&other->imagemimes_);
    std::swap(datatype_, other->datatype_);
    std::swap(datalen_, other->datalen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage_Impression_NativeAd_AssetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_Impression_NativeAd_AssetInfo_descriptor_;
  metadata.reflection = BidReqMessage_Impression_NativeAd_AssetInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidReqMessage_Impression_NativeAd::kLayoutFieldNumber;
const int BidReqMessage_Impression_NativeAd::kPlcmtcntFieldNumber;
const int BidReqMessage_Impression_NativeAd::kAssetFieldNumber;
#endif  // !_MSC_VER

BidReqMessage_Impression_NativeAd::BidReqMessage_Impression_NativeAd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage.Impression.NativeAd)
}

void BidReqMessage_Impression_NativeAd::InitAsDefaultInstance() {
}

BidReqMessage_Impression_NativeAd::BidReqMessage_Impression_NativeAd(const BidReqMessage_Impression_NativeAd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage.Impression.NativeAd)
}

void BidReqMessage_Impression_NativeAd::SharedCtor() {
  _cached_size_ = 0;
  layout_ = 0;
  plcmtcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage_Impression_NativeAd::~BidReqMessage_Impression_NativeAd() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage.Impression.NativeAd)
  SharedDtor();
}

void BidReqMessage_Impression_NativeAd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidReqMessage_Impression_NativeAd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage_Impression_NativeAd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_Impression_NativeAd_descriptor_;
}

const BidReqMessage_Impression_NativeAd& BidReqMessage_Impression_NativeAd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage_Impression_NativeAd* BidReqMessage_Impression_NativeAd::default_instance_ = NULL;

BidReqMessage_Impression_NativeAd* BidReqMessage_Impression_NativeAd::New() const {
  return new BidReqMessage_Impression_NativeAd;
}

void BidReqMessage_Impression_NativeAd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidReqMessage_Impression_NativeAd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(layout_, plcmtcnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  asset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage_Impression_NativeAd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage.Impression.NativeAd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layout = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layout_)));
          set_has_layout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plcmtcnt;
        break;
      }

      // optional int32 plcmtcnt = 2;
      case 2: {
        if (tag == 16) {
         parse_plcmtcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plcmtcnt_)));
          set_has_plcmtcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_asset;
        break;
      }

      // repeated .com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo asset = 3;
      case 3: {
        if (tag == 26) {
         parse_asset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_asset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_asset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage.Impression.NativeAd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage.Impression.NativeAd)
  return false;
#undef DO_
}

void BidReqMessage_Impression_NativeAd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage.Impression.NativeAd)
  // optional int32 layout = 1;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layout(), output);
  }

  // optional int32 plcmtcnt = 2;
  if (has_plcmtcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plcmtcnt(), output);
  }

  // repeated .com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo asset = 3;
  for (int i = 0; i < this->asset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->asset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage.Impression.NativeAd)
}

::google::protobuf::uint8* BidReqMessage_Impression_NativeAd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage.Impression.NativeAd)
  // optional int32 layout = 1;
  if (has_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layout(), target);
  }

  // optional int32 plcmtcnt = 2;
  if (has_plcmtcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plcmtcnt(), target);
  }

  // repeated .com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo asset = 3;
  for (int i = 0; i < this->asset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->asset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage.Impression.NativeAd)
  return target;
}

int BidReqMessage_Impression_NativeAd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 layout = 1;
    if (has_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layout());
    }

    // optional int32 plcmtcnt = 2;
    if (has_plcmtcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plcmtcnt());
    }

  }
  // repeated .com.pxene.proto.BidReqMessage.Impression.NativeAd.AssetInfo asset = 3;
  total_size += 1 * this->asset_size();
  for (int i = 0; i < this->asset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->asset(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage_Impression_NativeAd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage_Impression_NativeAd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage_Impression_NativeAd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage_Impression_NativeAd::MergeFrom(const BidReqMessage_Impression_NativeAd& from) {
  GOOGLE_CHECK_NE(&from, this);
  asset_.MergeFrom(from.asset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layout()) {
      set_layout(from.layout());
    }
    if (from.has_plcmtcnt()) {
      set_plcmtcnt(from.plcmtcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage_Impression_NativeAd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage_Impression_NativeAd::CopyFrom(const BidReqMessage_Impression_NativeAd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage_Impression_NativeAd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->asset())) return false;
  return true;
}

void BidReqMessage_Impression_NativeAd::Swap(BidReqMessage_Impression_NativeAd* other) {
  if (other != this) {
    std::swap(layout_, other->layout_);
    std::swap(plcmtcnt_, other->plcmtcnt_);
    asset_.Swap(&other->asset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage_Impression_NativeAd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_Impression_NativeAd_descriptor_;
  metadata.reflection = BidReqMessage_Impression_NativeAd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidReqMessage_Impression_Ext::kInstlFieldNumber;
const int BidReqMessage_Impression_Ext::kSplashFieldNumber;
const int BidReqMessage_Impression_Ext::kAdvidFieldNumber;
#endif  // !_MSC_VER

BidReqMessage_Impression_Ext::BidReqMessage_Impression_Ext()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage.Impression.Ext)
}

void BidReqMessage_Impression_Ext::InitAsDefaultInstance() {
}

BidReqMessage_Impression_Ext::BidReqMessage_Impression_Ext(const BidReqMessage_Impression_Ext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage.Impression.Ext)
}

void BidReqMessage_Impression_Ext::SharedCtor() {
  _cached_size_ = 0;
  instl_ = 0;
  splash_ = 0;
  advid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage_Impression_Ext::~BidReqMessage_Impression_Ext() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage.Impression.Ext)
  SharedDtor();
}

void BidReqMessage_Impression_Ext::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidReqMessage_Impression_Ext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage_Impression_Ext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_Impression_Ext_descriptor_;
}

const BidReqMessage_Impression_Ext& BidReqMessage_Impression_Ext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage_Impression_Ext* BidReqMessage_Impression_Ext::default_instance_ = NULL;

BidReqMessage_Impression_Ext* BidReqMessage_Impression_Ext::New() const {
  return new BidReqMessage_Impression_Ext;
}

void BidReqMessage_Impression_Ext::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidReqMessage_Impression_Ext*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(instl_, advid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage_Impression_Ext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage.Impression.Ext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instl = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instl_)));
          set_has_instl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_splash;
        break;
      }

      // optional int32 splash = 2;
      case 2: {
        if (tag == 16) {
         parse_splash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &splash_)));
          set_has_splash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_advid;
        break;
      }

      // optional int32 advid = 3;
      case 3: {
        if (tag == 24) {
         parse_advid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advid_)));
          set_has_advid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage.Impression.Ext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage.Impression.Ext)
  return false;
#undef DO_
}

void BidReqMessage_Impression_Ext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage.Impression.Ext)
  // optional int32 instl = 1;
  if (has_instl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instl(), output);
  }

  // optional int32 splash = 2;
  if (has_splash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->splash(), output);
  }

  // optional int32 advid = 3;
  if (has_advid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->advid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage.Impression.Ext)
}

::google::protobuf::uint8* BidReqMessage_Impression_Ext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage.Impression.Ext)
  // optional int32 instl = 1;
  if (has_instl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instl(), target);
  }

  // optional int32 splash = 2;
  if (has_splash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->splash(), target);
  }

  // optional int32 advid = 3;
  if (has_advid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->advid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage.Impression.Ext)
  return target;
}

int BidReqMessage_Impression_Ext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instl = 1;
    if (has_instl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instl());
    }

    // optional int32 splash = 2;
    if (has_splash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->splash());
    }

    // optional int32 advid = 3;
    if (has_advid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage_Impression_Ext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage_Impression_Ext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage_Impression_Ext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage_Impression_Ext::MergeFrom(const BidReqMessage_Impression_Ext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instl()) {
      set_instl(from.instl());
    }
    if (from.has_splash()) {
      set_splash(from.splash());
    }
    if (from.has_advid()) {
      set_advid(from.advid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage_Impression_Ext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage_Impression_Ext::CopyFrom(const BidReqMessage_Impression_Ext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage_Impression_Ext::IsInitialized() const {

  return true;
}

void BidReqMessage_Impression_Ext::Swap(BidReqMessage_Impression_Ext* other) {
  if (other != this) {
    std::swap(instl_, other->instl_);
    std::swap(splash_, other->splash_);
    std::swap(advid_, other->advid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage_Impression_Ext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_Impression_Ext_descriptor_;
  metadata.reflection = BidReqMessage_Impression_Ext_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidReqMessage_Impression::kIdFieldNumber;
const int BidReqMessage_Impression::kTypeFieldNumber;
const int BidReqMessage_Impression::kDoBidFieldNumber;
const int BidReqMessage_Impression::kBannerFieldNumber;
const int BidReqMessage_Impression::kVideoFieldNumber;
const int BidReqMessage_Impression::kNativeAdFieldNumber;
const int BidReqMessage_Impression::kBidFloorFieldNumber;
const int BidReqMessage_Impression::kBidFloorCurFieldNumber;
const int BidReqMessage_Impression::kAdPosFieldNumber;
const int BidReqMessage_Impression::kExtFieldNumber;
const int BidReqMessage_Impression::kSelMapidFieldNumber;
const int BidReqMessage_Impression::kPriceFieldNumber;
const int BidReqMessage_Impression::kTrackUrlParFieldNumber;
const int BidReqMessage_Impression::kCurlFieldNumber;
const int BidReqMessage_Impression::kMonitorcodeFieldNumber;
const int BidReqMessage_Impression::kImonitorurlFieldNumber;
const int BidReqMessage_Impression::kCmonitorurlFieldNumber;
#endif  // !_MSC_VER

BidReqMessage_Impression::BidReqMessage_Impression()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage.Impression)
}

void BidReqMessage_Impression::InitAsDefaultInstance() {
  banner_ = const_cast< ::com::pxene::proto::BidReqMessage_Impression_Banner*>(&::com::pxene::proto::BidReqMessage_Impression_Banner::default_instance());
  video_ = const_cast< ::com::pxene::proto::BidReqMessage_Impression_Video*>(&::com::pxene::proto::BidReqMessage_Impression_Video::default_instance());
  nativead_ = const_cast< ::com::pxene::proto::BidReqMessage_Impression_NativeAd*>(&::com::pxene::proto::BidReqMessage_Impression_NativeAd::default_instance());
  ext_ = const_cast< ::com::pxene::proto::BidReqMessage_Impression_Ext*>(&::com::pxene::proto::BidReqMessage_Impression_Ext::default_instance());
}

BidReqMessage_Impression::BidReqMessage_Impression(const BidReqMessage_Impression& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage.Impression)
}

void BidReqMessage_Impression::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  dobid_ = false;
  banner_ = NULL;
  video_ = NULL;
  nativead_ = NULL;
  bidfloor_ = 0;
  bidfloorcur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adpos_ = 0;
  ext_ = NULL;
  selmapid_ = 0;
  price_ = 0;
  track_url_par_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage_Impression::~BidReqMessage_Impression() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage.Impression)
  SharedDtor();
}

void BidReqMessage_Impression::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (bidfloorcur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidfloorcur_;
  }
  if (track_url_par_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete track_url_par_;
  }
  if (curl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curl_;
  }
  if (monitorcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete monitorcode_;
  }
  if (this != default_instance_) {
    delete banner_;
    delete video_;
    delete nativead_;
    delete ext_;
  }
}

void BidReqMessage_Impression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage_Impression::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_Impression_descriptor_;
}

const BidReqMessage_Impression& BidReqMessage_Impression::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage_Impression* BidReqMessage_Impression::default_instance_ = NULL;

BidReqMessage_Impression* BidReqMessage_Impression::New() const {
  return new BidReqMessage_Impression;
}

void BidReqMessage_Impression::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidReqMessage_Impression*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, dobid_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_banner()) {
      if (banner_ != NULL) banner_->::com::pxene::proto::BidReqMessage_Impression_Banner::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::com::pxene::proto::BidReqMessage_Impression_Video::Clear();
    }
    if (has_nativead()) {
      if (nativead_ != NULL) nativead_->::com::pxene::proto::BidReqMessage_Impression_NativeAd::Clear();
    }
    bidfloor_ = 0;
    if (has_bidfloorcur()) {
      if (bidfloorcur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bidfloorcur_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(selmapid_, price_);
    adpos_ = 0;
    if (has_ext()) {
      if (ext_ != NULL) ext_->::com::pxene::proto::BidReqMessage_Impression_Ext::Clear();
    }
    if (has_track_url_par()) {
      if (track_url_par_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        track_url_par_->clear();
      }
    }
    if (has_curl()) {
      if (curl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        curl_->clear();
      }
    }
    if (has_monitorcode()) {
      if (monitorcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        monitorcode_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  imonitorurl_.Clear();
  cmonitorurl_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage_Impression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage.Impression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_doBid;
        break;
      }

      // optional bool doBid = 3;
      case 3: {
        if (tag == 24) {
         parse_doBid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dobid_)));
          set_has_dobid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_banner;
        break;
      }

      // optional .com.pxene.proto.BidReqMessage.Impression.Banner banner = 4;
      case 4: {
        if (tag == 34) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_video;
        break;
      }

      // optional .com.pxene.proto.BidReqMessage.Impression.Video video = 5;
      case 5: {
        if (tag == 42) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nativeAd;
        break;
      }

      // optional .com.pxene.proto.BidReqMessage.Impression.NativeAd nativeAd = 6;
      case 6: {
        if (tag == 50) {
         parse_nativeAd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nativead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bidFloor;
        break;
      }

      // optional int32 bidFloor = 7;
      case 7: {
        if (tag == 56) {
         parse_bidFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bidFloorCur;
        break;
      }

      // optional string bidFloorCur = 8;
      case 8: {
        if (tag == 66) {
         parse_bidFloorCur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidfloorcur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidfloorcur().data(), this->bidfloorcur().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidfloorcur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_adPos;
        break;
      }

      // optional int32 adPos = 9;
      case 9: {
        if (tag == 72) {
         parse_adPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adpos_)));
          set_has_adpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ext;
        break;
      }

      // optional .com.pxene.proto.BidReqMessage.Impression.Ext ext = 10;
      case 10: {
        if (tag == 82) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_selMapid;
        break;
      }

      // optional int32 selMapid = 11;
      case 11: {
        if (tag == 88) {
         parse_selMapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selmapid_)));
          set_has_selmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_price;
        break;
      }

      // optional int32 price = 12;
      case 12: {
        if (tag == 96) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_track_url_par;
        break;
      }

      // optional string track_url_par = 13;
      case 13: {
        if (tag == 106) {
         parse_track_url_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_url_par()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_url_par().data(), this->track_url_par().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "track_url_par");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_curl;
        break;
      }

      // optional string curl = 14;
      case 14: {
        if (tag == 114) {
         parse_curl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curl().data(), this->curl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_monitorcode;
        break;
      }

      // optional string monitorcode = 15;
      case 15: {
        if (tag == 122) {
         parse_monitorcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitorcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monitorcode().data(), this->monitorcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "monitorcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_imonitorurl;
        break;
      }

      // repeated string imonitorurl = 16;
      case 16: {
        if (tag == 130) {
         parse_imonitorurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_imonitorurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imonitorurl(this->imonitorurl_size() - 1).data(),
            this->imonitorurl(this->imonitorurl_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imonitorurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_imonitorurl;
        if (input->ExpectTag(138)) goto parse_cmonitorurl;
        break;
      }

      // repeated string cmonitorurl = 17;
      case 17: {
        if (tag == 138) {
         parse_cmonitorurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmonitorurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmonitorurl(this->cmonitorurl_size() - 1).data(),
            this->cmonitorurl(this->cmonitorurl_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmonitorurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_cmonitorurl;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage.Impression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage.Impression)
  return false;
#undef DO_
}

void BidReqMessage_Impression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage.Impression)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional bool doBid = 3;
  if (has_dobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dobid(), output);
  }

  // optional .com.pxene.proto.BidReqMessage.Impression.Banner banner = 4;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->banner(), output);
  }

  // optional .com.pxene.proto.BidReqMessage.Impression.Video video = 5;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->video(), output);
  }

  // optional .com.pxene.proto.BidReqMessage.Impression.NativeAd nativeAd = 6;
  if (has_nativead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nativead(), output);
  }

  // optional int32 bidFloor = 7;
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bidfloor(), output);
  }

  // optional string bidFloorCur = 8;
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidfloorcur");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->bidfloorcur(), output);
  }

  // optional int32 adPos = 9;
  if (has_adpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->adpos(), output);
  }

  // optional .com.pxene.proto.BidReqMessage.Impression.Ext ext = 10;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ext(), output);
  }

  // optional int32 selMapid = 11;
  if (has_selmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->selmapid(), output);
  }

  // optional int32 price = 12;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->price(), output);
  }

  // optional string track_url_par = 13;
  if (has_track_url_par()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_url_par().data(), this->track_url_par().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "track_url_par");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->track_url_par(), output);
  }

  // optional string curl = 14;
  if (has_curl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curl().data(), this->curl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->curl(), output);
  }

  // optional string monitorcode = 15;
  if (has_monitorcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitorcode().data(), this->monitorcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monitorcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->monitorcode(), output);
  }

  // repeated string imonitorurl = 16;
  for (int i = 0; i < this->imonitorurl_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->imonitorurl(i).data(), this->imonitorurl(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "imonitorurl");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->imonitorurl(i), output);
  }

  // repeated string cmonitorurl = 17;
  for (int i = 0; i < this->cmonitorurl_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cmonitorurl(i).data(), this->cmonitorurl(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cmonitorurl");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->cmonitorurl(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage.Impression)
}

::google::protobuf::uint8* BidReqMessage_Impression::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage.Impression)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional bool doBid = 3;
  if (has_dobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dobid(), target);
  }

  // optional .com.pxene.proto.BidReqMessage.Impression.Banner banner = 4;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->banner(), target);
  }

  // optional .com.pxene.proto.BidReqMessage.Impression.Video video = 5;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->video(), target);
  }

  // optional .com.pxene.proto.BidReqMessage.Impression.NativeAd nativeAd = 6;
  if (has_nativead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nativead(), target);
  }

  // optional int32 bidFloor = 7;
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bidfloor(), target);
  }

  // optional string bidFloorCur = 8;
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidfloorcur");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bidfloorcur(), target);
  }

  // optional int32 adPos = 9;
  if (has_adpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->adpos(), target);
  }

  // optional .com.pxene.proto.BidReqMessage.Impression.Ext ext = 10;
  if (has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ext(), target);
  }

  // optional int32 selMapid = 11;
  if (has_selmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->selmapid(), target);
  }

  // optional int32 price = 12;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->price(), target);
  }

  // optional string track_url_par = 13;
  if (has_track_url_par()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_url_par().data(), this->track_url_par().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "track_url_par");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->track_url_par(), target);
  }

  // optional string curl = 14;
  if (has_curl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curl().data(), this->curl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->curl(), target);
  }

  // optional string monitorcode = 15;
  if (has_monitorcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitorcode().data(), this->monitorcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monitorcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->monitorcode(), target);
  }

  // repeated string imonitorurl = 16;
  for (int i = 0; i < this->imonitorurl_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imonitorurl(i).data(), this->imonitorurl(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imonitorurl");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->imonitorurl(i), target);
  }

  // repeated string cmonitorurl = 17;
  for (int i = 0; i < this->cmonitorurl_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmonitorurl(i).data(), this->cmonitorurl(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmonitorurl");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->cmonitorurl(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage.Impression)
  return target;
}

int BidReqMessage_Impression::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool doBid = 3;
    if (has_dobid()) {
      total_size += 1 + 1;
    }

    // optional .com.pxene.proto.BidReqMessage.Impression.Banner banner = 4;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner());
    }

    // optional .com.pxene.proto.BidReqMessage.Impression.Video video = 5;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional .com.pxene.proto.BidReqMessage.Impression.NativeAd nativeAd = 6;
    if (has_nativead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nativead());
    }

    // optional int32 bidFloor = 7;
    if (has_bidfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidfloor());
    }

    // optional string bidFloorCur = 8;
    if (has_bidfloorcur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidfloorcur());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 adPos = 9;
    if (has_adpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adpos());
    }

    // optional .com.pxene.proto.BidReqMessage.Impression.Ext ext = 10;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext());
    }

    // optional int32 selMapid = 11;
    if (has_selmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selmapid());
    }

    // optional int32 price = 12;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional string track_url_par = 13;
    if (has_track_url_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_url_par());
    }

    // optional string curl = 14;
    if (has_curl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->curl());
    }

    // optional string monitorcode = 15;
    if (has_monitorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monitorcode());
    }

  }
  // repeated string imonitorurl = 16;
  total_size += 2 * this->imonitorurl_size();
  for (int i = 0; i < this->imonitorurl_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->imonitorurl(i));
  }

  // repeated string cmonitorurl = 17;
  total_size += 2 * this->cmonitorurl_size();
  for (int i = 0; i < this->cmonitorurl_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmonitorurl(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage_Impression::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage_Impression* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage_Impression*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage_Impression::MergeFrom(const BidReqMessage_Impression& from) {
  GOOGLE_CHECK_NE(&from, this);
  imonitorurl_.MergeFrom(from.imonitorurl_);
  cmonitorurl_.MergeFrom(from.cmonitorurl_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dobid()) {
      set_dobid(from.dobid());
    }
    if (from.has_banner()) {
      mutable_banner()->::com::pxene::proto::BidReqMessage_Impression_Banner::MergeFrom(from.banner());
    }
    if (from.has_video()) {
      mutable_video()->::com::pxene::proto::BidReqMessage_Impression_Video::MergeFrom(from.video());
    }
    if (from.has_nativead()) {
      mutable_nativead()->::com::pxene::proto::BidReqMessage_Impression_NativeAd::MergeFrom(from.nativead());
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
    if (from.has_bidfloorcur()) {
      set_bidfloorcur(from.bidfloorcur());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adpos()) {
      set_adpos(from.adpos());
    }
    if (from.has_ext()) {
      mutable_ext()->::com::pxene::proto::BidReqMessage_Impression_Ext::MergeFrom(from.ext());
    }
    if (from.has_selmapid()) {
      set_selmapid(from.selmapid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_track_url_par()) {
      set_track_url_par(from.track_url_par());
    }
    if (from.has_curl()) {
      set_curl(from.curl());
    }
    if (from.has_monitorcode()) {
      set_monitorcode(from.monitorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage_Impression::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage_Impression::CopyFrom(const BidReqMessage_Impression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage_Impression::IsInitialized() const {

  if (has_nativead()) {
    if (!this->nativead().IsInitialized()) return false;
  }
  return true;
}

void BidReqMessage_Impression::Swap(BidReqMessage_Impression* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(dobid_, other->dobid_);
    std::swap(banner_, other->banner_);
    std::swap(video_, other->video_);
    std::swap(nativead_, other->nativead_);
    std::swap(bidfloor_, other->bidfloor_);
    std::swap(bidfloorcur_, other->bidfloorcur_);
    std::swap(adpos_, other->adpos_);
    std::swap(ext_, other->ext_);
    std::swap(selmapid_, other->selmapid_);
    std::swap(price_, other->price_);
    std::swap(track_url_par_, other->track_url_par_);
    std::swap(curl_, other->curl_);
    std::swap(monitorcode_, other->monitorcode_);
    imonitorurl_.Swap(&other->imonitorurl_);
    cmonitorurl_.Swap(&other->cmonitorurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage_Impression::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_Impression_descriptor_;
  metadata.reflection = BidReqMessage_Impression_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidReqMessage_App::kIdFieldNumber;
const int BidReqMessage_App::kNameFieldNumber;
const int BidReqMessage_App::kCatFieldNumber;
const int BidReqMessage_App::kBundleFieldNumber;
const int BidReqMessage_App::kStoreurlFieldNumber;
#endif  // !_MSC_VER

BidReqMessage_App::BidReqMessage_App()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage.App)
}

void BidReqMessage_App::InitAsDefaultInstance() {
}

BidReqMessage_App::BidReqMessage_App(const BidReqMessage_App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage.App)
}

void BidReqMessage_App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage_App::~BidReqMessage_App() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage.App)
  SharedDtor();
}

void BidReqMessage_App::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storeurl_;
  }
  if (this != default_instance_) {
  }
}

void BidReqMessage_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage_App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_App_descriptor_;
}

const BidReqMessage_App& BidReqMessage_App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage_App* BidReqMessage_App::default_instance_ = NULL;

BidReqMessage_App* BidReqMessage_App::New() const {
  return new BidReqMessage_App;
}

void BidReqMessage_App::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_bundle()) {
      if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bundle_->clear();
      }
    }
    if (has_storeurl()) {
      if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        storeurl_->clear();
      }
    }
  }
  cat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cat;
        break;
      }

      // repeated int32 cat = 3;
      case 3: {
        if (tag == 24) {
         parse_cat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cat())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cat;
        if (input->ExpectTag(34)) goto parse_bundle;
        break;
      }

      // optional string bundle = 4;
      case 4: {
        if (tag == 34) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_storeurl;
        break;
      }

      // optional string storeurl = 5;
      case 5: {
        if (tag == 42) {
         parse_storeurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storeurl().data(), this->storeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "storeurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage.App)
  return false;
#undef DO_
}

void BidReqMessage_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage.App)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated int32 cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cat(i), output);
  }

  // optional string bundle = 4;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bundle(), output);
  }

  // optional string storeurl = 5;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storeurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->storeurl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage.App)
}

::google::protobuf::uint8* BidReqMessage_App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage.App)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated int32 cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cat(i), target);
  }

  // optional string bundle = 4;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bundle(), target);
  }

  // optional string storeurl = 5;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storeurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->storeurl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage.App)
  return target;
}

int BidReqMessage_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string bundle = 4;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

    // optional string storeurl = 5;
    if (has_storeurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storeurl());
    }

  }
  // repeated int32 cat = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cat(i));
    }
    total_size += 1 * this->cat_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage_App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage_App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage_App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage_App::MergeFrom(const BidReqMessage_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  cat_.MergeFrom(from.cat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bundle()) {
      set_bundle(from.bundle());
    }
    if (from.has_storeurl()) {
      set_storeurl(from.storeurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage_App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage_App::CopyFrom(const BidReqMessage_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage_App::IsInitialized() const {

  return true;
}

void BidReqMessage_App::Swap(BidReqMessage_App* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    cat_.Swap(&other->cat_);
    std::swap(bundle_, other->bundle_);
    std::swap(storeurl_, other->storeurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage_App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_App_descriptor_;
  metadata.reflection = BidReqMessage_App_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidReqMessage_Device_DeviceIdPair::kTypeFieldNumber;
const int BidReqMessage_Device_DeviceIdPair::kIdFieldNumber;
#endif  // !_MSC_VER

BidReqMessage_Device_DeviceIdPair::BidReqMessage_Device_DeviceIdPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
}

void BidReqMessage_Device_DeviceIdPair::InitAsDefaultInstance() {
}

BidReqMessage_Device_DeviceIdPair::BidReqMessage_Device_DeviceIdPair(const BidReqMessage_Device_DeviceIdPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
}

void BidReqMessage_Device_DeviceIdPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage_Device_DeviceIdPair::~BidReqMessage_Device_DeviceIdPair() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
  SharedDtor();
}

void BidReqMessage_Device_DeviceIdPair::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BidReqMessage_Device_DeviceIdPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage_Device_DeviceIdPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_Device_DeviceIdPair_descriptor_;
}

const BidReqMessage_Device_DeviceIdPair& BidReqMessage_Device_DeviceIdPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage_Device_DeviceIdPair* BidReqMessage_Device_DeviceIdPair::default_instance_ = NULL;

BidReqMessage_Device_DeviceIdPair* BidReqMessage_Device_DeviceIdPair::New() const {
  return new BidReqMessage_Device_DeviceIdPair;
}

void BidReqMessage_Device_DeviceIdPair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage_Device_DeviceIdPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
  return false;
#undef DO_
}

void BidReqMessage_Device_DeviceIdPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
}

::google::protobuf::uint8* BidReqMessage_Device_DeviceIdPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage.Device.DeviceIdPair)
  return target;
}

int BidReqMessage_Device_DeviceIdPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage_Device_DeviceIdPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage_Device_DeviceIdPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage_Device_DeviceIdPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage_Device_DeviceIdPair::MergeFrom(const BidReqMessage_Device_DeviceIdPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage_Device_DeviceIdPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage_Device_DeviceIdPair::CopyFrom(const BidReqMessage_Device_DeviceIdPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage_Device_DeviceIdPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidReqMessage_Device_DeviceIdPair::Swap(BidReqMessage_Device_DeviceIdPair* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage_Device_DeviceIdPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_Device_DeviceIdPair_descriptor_;
  metadata.reflection = BidReqMessage_Device_DeviceIdPair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidReqMessage_Device::kDidsFieldNumber;
const int BidReqMessage_Device::kDpidsFieldNumber;
const int BidReqMessage_Device::kUaFieldNumber;
const int BidReqMessage_Device::kLocationFieldNumber;
const int BidReqMessage_Device::kIpFieldNumber;
const int BidReqMessage_Device::kGeoLatFieldNumber;
const int BidReqMessage_Device::kGeoLonFieldNumber;
const int BidReqMessage_Device::kCarrierFieldNumber;
const int BidReqMessage_Device::kMakeFieldNumber;
const int BidReqMessage_Device::kMakestrFieldNumber;
const int BidReqMessage_Device::kModelFieldNumber;
const int BidReqMessage_Device::kOsFieldNumber;
const int BidReqMessage_Device::kOsvFieldNumber;
const int BidReqMessage_Device::kConnectionTypeFieldNumber;
const int BidReqMessage_Device::kDeviceTypeFieldNumber;
#endif  // !_MSC_VER

BidReqMessage_Device::BidReqMessage_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage.Device)
}

void BidReqMessage_Device::InitAsDefaultInstance() {
}

BidReqMessage_Device::BidReqMessage_Device(const BidReqMessage_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage.Device)
}

void BidReqMessage_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geolat_ = 0;
  geolon_ = 0;
  carrier_ = 0;
  make_ = 0;
  makestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = 0;
  osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connectiontype_ = 0;
  devicetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage_Device::~BidReqMessage_Device() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage.Device)
  SharedDtor();
}

void BidReqMessage_Device::SharedDtor() {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (makestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete makestr_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (this != default_instance_) {
  }
}

void BidReqMessage_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_Device_descriptor_;
}

const BidReqMessage_Device& BidReqMessage_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage_Device* BidReqMessage_Device::default_instance_ = NULL;

BidReqMessage_Device* BidReqMessage_Device::New() const {
  return new BidReqMessage_Device;
}

void BidReqMessage_Device::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidReqMessage_Device*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 252) {
    ZR_(geolat_, geolon_);
    if (has_ua()) {
      if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ua_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(make_, os_);
    ZR_(connectiontype_, devicetype_);
    if (has_makestr()) {
      if (makestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        makestr_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_osv()) {
      if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        osv_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dids_.Clear();
  dpids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dids = 1;
      case 1: {
        if (tag == 10) {
         parse_dids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dids;
        if (input->ExpectTag(18)) goto parse_dpids;
        break;
      }

      // repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dpids = 2;
      case 2: {
        if (tag == 18) {
         parse_dpids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dpids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dpids;
        if (input->ExpectTag(26)) goto parse_ua;
        break;
      }

      // optional string ua = 3;
      case 3: {
        if (tag == 26) {
         parse_ua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_location;
        break;
      }

      // optional int32 location = 4;
      case 4: {
        if (tag == 32) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (tag == 42) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_geoLat;
        break;
      }

      // optional double geoLat = 6;
      case 6: {
        if (tag == 49) {
         parse_geoLat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &geolat_)));
          set_has_geolat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_geoLon;
        break;
      }

      // optional double geoLon = 7;
      case 7: {
        if (tag == 57) {
         parse_geoLon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &geolon_)));
          set_has_geolon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_carrier;
        break;
      }

      // optional int32 carrier = 8;
      case 8: {
        if (tag == 64) {
         parse_carrier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carrier_)));
          set_has_carrier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_make;
        break;
      }

      // optional int32 make = 9;
      case 9: {
        if (tag == 72) {
         parse_make:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &make_)));
          set_has_make();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_makestr;
        break;
      }

      // optional string makestr = 10;
      case 10: {
        if (tag == 82) {
         parse_makestr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_makestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->makestr().data(), this->makestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "makestr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_model;
        break;
      }

      // optional string model = 11;
      case 11: {
        if (tag == 90) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_os;
        break;
      }

      // optional int32 os = 12;
      case 12: {
        if (tag == 96) {
         parse_os:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_)));
          set_has_os();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_osv;
        break;
      }

      // optional string osv = 13;
      case 13: {
        if (tag == 106) {
         parse_osv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->osv().data(), this->osv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "osv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_connectionType;
        break;
      }

      // optional int32 connectionType = 14;
      case 14: {
        if (tag == 112) {
         parse_connectionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connectiontype_)));
          set_has_connectiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_deviceType;
        break;
      }

      // optional int32 deviceType = 15;
      case 15: {
        if (tag == 120) {
         parse_deviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage.Device)
  return false;
#undef DO_
}

void BidReqMessage_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage.Device)
  // repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dids = 1;
  for (int i = 0; i < this->dids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dids(i), output);
  }

  // repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dpids = 2;
  for (int i = 0; i < this->dpids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dpids(i), output);
  }

  // optional string ua = 3;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ua(), output);
  }

  // optional int32 location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->location(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  // optional double geoLat = 6;
  if (has_geolat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->geolat(), output);
  }

  // optional double geoLon = 7;
  if (has_geolon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->geolon(), output);
  }

  // optional int32 carrier = 8;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->carrier(), output);
  }

  // optional int32 make = 9;
  if (has_make()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->make(), output);
  }

  // optional string makestr = 10;
  if (has_makestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->makestr().data(), this->makestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "makestr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->makestr(), output);
  }

  // optional string model = 11;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->model(), output);
  }

  // optional int32 os = 12;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->os(), output);
  }

  // optional string osv = 13;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->osv(), output);
  }

  // optional int32 connectionType = 14;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->connectiontype(), output);
  }

  // optional int32 deviceType = 15;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->devicetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage.Device)
}

::google::protobuf::uint8* BidReqMessage_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage.Device)
  // repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dids = 1;
  for (int i = 0; i < this->dids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dids(i), target);
  }

  // repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dpids = 2;
  for (int i = 0; i < this->dpids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dpids(i), target);
  }

  // optional string ua = 3;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ua(), target);
  }

  // optional int32 location = 4;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->location(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional double geoLat = 6;
  if (has_geolat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->geolat(), target);
  }

  // optional double geoLon = 7;
  if (has_geolon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->geolon(), target);
  }

  // optional int32 carrier = 8;
  if (has_carrier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->carrier(), target);
  }

  // optional int32 make = 9;
  if (has_make()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->make(), target);
  }

  // optional string makestr = 10;
  if (has_makestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->makestr().data(), this->makestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "makestr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->makestr(), target);
  }

  // optional string model = 11;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->model(), target);
  }

  // optional int32 os = 12;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->os(), target);
  }

  // optional string osv = 13;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->osv(), target);
  }

  // optional int32 connectionType = 14;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->connectiontype(), target);
  }

  // optional int32 deviceType = 15;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->devicetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage.Device)
  return target;
}

int BidReqMessage_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string ua = 3;
    if (has_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ua());
    }

    // optional int32 location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional double geoLat = 6;
    if (has_geolat()) {
      total_size += 1 + 8;
    }

    // optional double geoLon = 7;
    if (has_geolon()) {
      total_size += 1 + 8;
    }

    // optional int32 carrier = 8;
    if (has_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carrier());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 make = 9;
    if (has_make()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->make());
    }

    // optional string makestr = 10;
    if (has_makestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->makestr());
    }

    // optional string model = 11;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional int32 os = 12;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os());
    }

    // optional string osv = 13;
    if (has_osv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osv());
    }

    // optional int32 connectionType = 14;
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connectiontype());
    }

    // optional int32 deviceType = 15;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicetype());
    }

  }
  // repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dids = 1;
  total_size += 1 * this->dids_size();
  for (int i = 0; i < this->dids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dids(i));
  }

  // repeated .com.pxene.proto.BidReqMessage.Device.DeviceIdPair dpids = 2;
  total_size += 1 * this->dpids_size();
  for (int i = 0; i < this->dpids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dpids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage_Device::MergeFrom(const BidReqMessage_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  dids_.MergeFrom(from.dids_);
  dpids_.MergeFrom(from.dpids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_ua()) {
      set_ua(from.ua());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_geolat()) {
      set_geolat(from.geolat());
    }
    if (from.has_geolon()) {
      set_geolon(from.geolon());
    }
    if (from.has_carrier()) {
      set_carrier(from.carrier());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_make()) {
      set_make(from.make());
    }
    if (from.has_makestr()) {
      set_makestr(from.makestr());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_osv()) {
      set_osv(from.osv());
    }
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage_Device::CopyFrom(const BidReqMessage_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage_Device::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->dids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dpids())) return false;
  return true;
}

void BidReqMessage_Device::Swap(BidReqMessage_Device* other) {
  if (other != this) {
    dids_.Swap(&other->dids_);
    dpids_.Swap(&other->dpids_);
    std::swap(ua_, other->ua_);
    std::swap(location_, other->location_);
    std::swap(ip_, other->ip_);
    std::swap(geolat_, other->geolat_);
    std::swap(geolon_, other->geolon_);
    std::swap(carrier_, other->carrier_);
    std::swap(make_, other->make_);
    std::swap(makestr_, other->makestr_);
    std::swap(model_, other->model_);
    std::swap(os_, other->os_);
    std::swap(osv_, other->osv_);
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_Device_descriptor_;
  metadata.reflection = BidReqMessage_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidReqMessage_UserInfo::kIdFieldNumber;
const int BidReqMessage_UserInfo::kGenderFieldNumber;
const int BidReqMessage_UserInfo::kYobFieldNumber;
const int BidReqMessage_UserInfo::kKeywordsFieldNumber;
const int BidReqMessage_UserInfo::kGeoLatFieldNumber;
const int BidReqMessage_UserInfo::kGeoLonFieldNumber;
const int BidReqMessage_UserInfo::kSearchkeyFieldNumber;
#endif  // !_MSC_VER

BidReqMessage_UserInfo::BidReqMessage_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage.UserInfo)
}

void BidReqMessage_UserInfo::InitAsDefaultInstance() {
}

BidReqMessage_UserInfo::BidReqMessage_UserInfo(const BidReqMessage_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage.UserInfo)
}

void BidReqMessage_UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  yob_ = 0;
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geolat_ = 0;
  geolon_ = 0;
  searchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage_UserInfo::~BidReqMessage_UserInfo() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage.UserInfo)
  SharedDtor();
}

void BidReqMessage_UserInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (searchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete searchkey_;
  }
  if (this != default_instance_) {
  }
}

void BidReqMessage_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_UserInfo_descriptor_;
}

const BidReqMessage_UserInfo& BidReqMessage_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage_UserInfo* BidReqMessage_UserInfo::default_instance_ = NULL;

BidReqMessage_UserInfo* BidReqMessage_UserInfo::New() const {
  return new BidReqMessage_UserInfo;
}

void BidReqMessage_UserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidReqMessage_UserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(gender_, yob_);
    ZR_(geolat_, geolon_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keywords_->clear();
      }
    }
    if (has_searchkey()) {
      if (searchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        searchkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gender;
        break;
      }

      // optional int32 gender = 2;
      case 2: {
        if (tag == 16) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_yob;
        break;
      }

      // optional int32 yob = 3;
      case 3: {
        if (tag == 24) {
         parse_yob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yob_)));
          set_has_yob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_keywords;
        break;
      }

      // optional string keywords = 4;
      case 4: {
        if (tag == 34) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_geoLat;
        break;
      }

      // optional double geoLat = 5;
      case 5: {
        if (tag == 41) {
         parse_geoLat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &geolat_)));
          set_has_geolat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_geoLon;
        break;
      }

      // optional double geoLon = 6;
      case 6: {
        if (tag == 49) {
         parse_geoLon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &geolon_)));
          set_has_geolon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_searchkey;
        break;
      }

      // optional string searchkey = 7;
      case 7: {
        if (tag == 58) {
         parse_searchkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchkey().data(), this->searchkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "searchkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage.UserInfo)
  return false;
#undef DO_
}

void BidReqMessage_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage.UserInfo)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 gender = 2;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gender(), output);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yob(), output);
  }

  // optional string keywords = 4;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->keywords(), output);
  }

  // optional double geoLat = 5;
  if (has_geolat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->geolat(), output);
  }

  // optional double geoLon = 6;
  if (has_geolon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->geolon(), output);
  }

  // optional string searchkey = 7;
  if (has_searchkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchkey().data(), this->searchkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->searchkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage.UserInfo)
}

::google::protobuf::uint8* BidReqMessage_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage.UserInfo)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 gender = 2;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gender(), target);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yob(), target);
  }

  // optional string keywords = 4;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->keywords(), target);
  }

  // optional double geoLat = 5;
  if (has_geolat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->geolat(), target);
  }

  // optional double geoLon = 6;
  if (has_geolon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->geolon(), target);
  }

  // optional string searchkey = 7;
  if (has_searchkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchkey().data(), this->searchkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->searchkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage.UserInfo)
  return target;
}

int BidReqMessage_UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 gender = 2;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 yob = 3;
    if (has_yob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yob());
    }

    // optional string keywords = 4;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional double geoLat = 5;
    if (has_geolat()) {
      total_size += 1 + 8;
    }

    // optional double geoLon = 6;
    if (has_geolon()) {
      total_size += 1 + 8;
    }

    // optional string searchkey = 7;
    if (has_searchkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage_UserInfo::MergeFrom(const BidReqMessage_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_yob()) {
      set_yob(from.yob());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_geolat()) {
      set_geolat(from.geolat());
    }
    if (from.has_geolon()) {
      set_geolon(from.geolon());
    }
    if (from.has_searchkey()) {
      set_searchkey(from.searchkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage_UserInfo::CopyFrom(const BidReqMessage_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage_UserInfo::IsInitialized() const {

  return true;
}

void BidReqMessage_UserInfo::Swap(BidReqMessage_UserInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gender_, other->gender_);
    std::swap(yob_, other->yob_);
    std::swap(keywords_, other->keywords_);
    std::swap(geolat_, other->geolat_);
    std::swap(geolon_, other->geolon_);
    std::swap(searchkey_, other->searchkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_UserInfo_descriptor_;
  metadata.reflection = BidReqMessage_UserInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* BidReqMessage::_default_version_ = NULL;
#ifndef _MSC_VER
const int BidReqMessage::kVersionFieldNumber;
const int BidReqMessage::kRequestIdFieldNumber;
const int BidReqMessage::kTimeFieldNumber;
const int BidReqMessage::kAdxidFieldNumber;
const int BidReqMessage::kImpFieldNumber;
const int BidReqMessage::kAppFieldNumber;
const int BidReqMessage::kDeviceFieldNumber;
const int BidReqMessage::kUserInfoFieldNumber;
const int BidReqMessage::kBcatFieldNumber;
const int BidReqMessage::kBadvFieldNumber;
const int BidReqMessage::kIsRecommendFieldNumber;
const int BidReqMessage::kAtFieldNumber;
const int BidReqMessage::kSupportDeepLinkFieldNumber;
const int BidReqMessage::kBidServerFlagFieldNumber;
#endif  // !_MSC_VER

BidReqMessage::BidReqMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.pxene.proto.BidReqMessage)
}

void BidReqMessage::InitAsDefaultInstance() {
  app_ = const_cast< ::com::pxene::proto::BidReqMessage_App*>(&::com::pxene::proto::BidReqMessage_App::default_instance());
  device_ = const_cast< ::com::pxene::proto::BidReqMessage_Device*>(&::com::pxene::proto::BidReqMessage_Device::default_instance());
  userinfo_ = const_cast< ::com::pxene::proto::BidReqMessage_UserInfo*>(&::com::pxene::proto::BidReqMessage_UserInfo::default_instance());
}

BidReqMessage::BidReqMessage(const BidReqMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.pxene.proto.BidReqMessage)
}

void BidReqMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(_default_version_);
  requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  adxid_ = 0;
  app_ = NULL;
  device_ = NULL;
  userinfo_ = NULL;
  isrecommend_ = false;
  at_ = 0;
  support_deep_link_ = 0;
  bid_server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidReqMessage::~BidReqMessage() {
  // @@protoc_insertion_point(destructor:com.pxene.proto.BidReqMessage)
  SharedDtor();
}

void BidReqMessage::SharedDtor() {
  if (version_ != _default_version_) {
    delete version_;
  }
  if (requestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requestid_;
  }
  if (bid_server_flag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_server_flag_;
  }
  if (this != default_instance_) {
    delete app_;
    delete device_;
    delete userinfo_;
  }
}

void BidReqMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReqMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReqMessage_descriptor_;
}

const BidReqMessage& BidReqMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5finfo_2eproto();
  return *default_instance_;
}

BidReqMessage* BidReqMessage::default_instance_ = NULL;

BidReqMessage* BidReqMessage::New() const {
  return new BidReqMessage;
}

void BidReqMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidReqMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    if (has_version()) {
      if (version_ != _default_version_) {
        version_->assign(*_default_version_);
      }
    }
    if (has_requestid()) {
      if (requestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requestid_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    adxid_ = 0;
    if (has_app()) {
      if (app_ != NULL) app_->::com::pxene::proto::BidReqMessage_App::Clear();
    }
    if (has_device()) {
      if (device_ != NULL) device_->::com::pxene::proto::BidReqMessage_Device::Clear();
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::com::pxene::proto::BidReqMessage_UserInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 15360) {
    ZR_(at_, support_deep_link_);
    isrecommend_ = false;
    if (has_bid_server_flag()) {
      if (bid_server_flag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_server_flag_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  imp_.Clear();
  bcat_.Clear();
  badv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidReqMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.pxene.proto.BidReqMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1 [default = "1.0.7"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requestId;
        break;
      }

      // optional string requestId = 2;
      case 2: {
        if (tag == 18) {
         parse_requestId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requestid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adxid;
        break;
      }

      // optional int32 adxid = 4;
      case 4: {
        if (tag == 32) {
         parse_adxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adxid_)));
          set_has_adxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_imp;
        break;
      }

      // repeated .com.pxene.proto.BidReqMessage.Impression imp = 5;
      case 5: {
        if (tag == 42) {
         parse_imp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_imp;
        if (input->ExpectTag(50)) goto parse_app;
        break;
      }

      // optional .com.pxene.proto.BidReqMessage.App app = 6;
      case 6: {
        if (tag == 50) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_device;
        break;
      }

      // optional .com.pxene.proto.BidReqMessage.Device device = 7;
      case 7: {
        if (tag == 58) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_userInfo;
        break;
      }

      // optional .com.pxene.proto.BidReqMessage.UserInfo userInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bcat;
        break;
      }

      // repeated int32 bcat = 9;
      case 9: {
        if (tag == 72) {
         parse_bcat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_bcat())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bcat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bcat;
        if (input->ExpectTag(82)) goto parse_badv;
        break;
      }

      // repeated string badv = 10;
      case 10: {
        if (tag == 82) {
         parse_badv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_badv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->badv(this->badv_size() - 1).data(),
            this->badv(this->badv_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "badv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_badv;
        if (input->ExpectTag(88)) goto parse_isRecommend;
        break;
      }

      // optional bool isRecommend = 11;
      case 11: {
        if (tag == 88) {
         parse_isRecommend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecommend_)));
          set_has_isrecommend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_at;
        break;
      }

      // optional int32 at = 12;
      case 12: {
        if (tag == 96) {
         parse_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &at_)));
          set_has_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_support_deep_link;
        break;
      }

      // optional int32 support_deep_link = 13;
      case 13: {
        if (tag == 104) {
         parse_support_deep_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &support_deep_link_)));
          set_has_support_deep_link();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_bid_server_flag;
        break;
      }

      // optional string bid_server_flag = 14;
      case 14: {
        if (tag == 114) {
         parse_bid_server_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid_server_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid_server_flag().data(), this->bid_server_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bid_server_flag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.pxene.proto.BidReqMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.pxene.proto.BidReqMessage)
  return false;
#undef DO_
}

void BidReqMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.pxene.proto.BidReqMessage)
  // optional string version = 1 [default = "1.0.7"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional string requestId = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requestid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requestid(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional int32 adxid = 4;
  if (has_adxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adxid(), output);
  }

  // repeated .com.pxene.proto.BidReqMessage.Impression imp = 5;
  for (int i = 0; i < this->imp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->imp(i), output);
  }

  // optional .com.pxene.proto.BidReqMessage.App app = 6;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->app(), output);
  }

  // optional .com.pxene.proto.BidReqMessage.Device device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->device(), output);
  }

  // optional .com.pxene.proto.BidReqMessage.UserInfo userInfo = 8;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->userinfo(), output);
  }

  // repeated int32 bcat = 9;
  for (int i = 0; i < this->bcat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->bcat(i), output);
  }

  // repeated string badv = 10;
  for (int i = 0; i < this->badv_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->badv(i).data(), this->badv(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "badv");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->badv(i), output);
  }

  // optional bool isRecommend = 11;
  if (has_isrecommend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isrecommend(), output);
  }

  // optional int32 at = 12;
  if (has_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->at(), output);
  }

  // optional int32 support_deep_link = 13;
  if (has_support_deep_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->support_deep_link(), output);
  }

  // optional string bid_server_flag = 14;
  if (has_bid_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid_server_flag().data(), this->bid_server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid_server_flag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->bid_server_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.pxene.proto.BidReqMessage)
}

::google::protobuf::uint8* BidReqMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.pxene.proto.BidReqMessage)
  // optional string version = 1 [default = "1.0.7"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string requestId = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requestid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional int32 adxid = 4;
  if (has_adxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adxid(), target);
  }

  // repeated .com.pxene.proto.BidReqMessage.Impression imp = 5;
  for (int i = 0; i < this->imp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->imp(i), target);
  }

  // optional .com.pxene.proto.BidReqMessage.App app = 6;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->app(), target);
  }

  // optional .com.pxene.proto.BidReqMessage.Device device = 7;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->device(), target);
  }

  // optional .com.pxene.proto.BidReqMessage.UserInfo userInfo = 8;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->userinfo(), target);
  }

  // repeated int32 bcat = 9;
  for (int i = 0; i < this->bcat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->bcat(i), target);
  }

  // repeated string badv = 10;
  for (int i = 0; i < this->badv_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->badv(i).data(), this->badv(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "badv");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->badv(i), target);
  }

  // optional bool isRecommend = 11;
  if (has_isrecommend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isrecommend(), target);
  }

  // optional int32 at = 12;
  if (has_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->at(), target);
  }

  // optional int32 support_deep_link = 13;
  if (has_support_deep_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->support_deep_link(), target);
  }

  // optional string bid_server_flag = 14;
  if (has_bid_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid_server_flag().data(), this->bid_server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid_server_flag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->bid_server_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.pxene.proto.BidReqMessage)
  return target;
}

int BidReqMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1 [default = "1.0.7"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string requestId = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 adxid = 4;
    if (has_adxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adxid());
    }

    // optional .com.pxene.proto.BidReqMessage.App app = 6;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

    // optional .com.pxene.proto.BidReqMessage.Device device = 7;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional .com.pxene.proto.BidReqMessage.UserInfo userInfo = 8;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional bool isRecommend = 11;
    if (has_isrecommend()) {
      total_size += 1 + 1;
    }

    // optional int32 at = 12;
    if (has_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->at());
    }

    // optional int32 support_deep_link = 13;
    if (has_support_deep_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->support_deep_link());
    }

    // optional string bid_server_flag = 14;
    if (has_bid_server_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid_server_flag());
    }

  }
  // repeated .com.pxene.proto.BidReqMessage.Impression imp = 5;
  total_size += 1 * this->imp_size();
  for (int i = 0; i < this->imp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imp(i));
  }

  // repeated int32 bcat = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->bcat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bcat(i));
    }
    total_size += 1 * this->bcat_size() + data_size;
  }

  // repeated string badv = 10;
  total_size += 1 * this->badv_size();
  for (int i = 0; i < this->badv_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->badv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReqMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidReqMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidReqMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidReqMessage::MergeFrom(const BidReqMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  imp_.MergeFrom(from.imp_);
  bcat_.MergeFrom(from.bcat_);
  badv_.MergeFrom(from.badv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_adxid()) {
      set_adxid(from.adxid());
    }
    if (from.has_app()) {
      mutable_app()->::com::pxene::proto::BidReqMessage_App::MergeFrom(from.app());
    }
    if (from.has_device()) {
      mutable_device()->::com::pxene::proto::BidReqMessage_Device::MergeFrom(from.device());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::com::pxene::proto::BidReqMessage_UserInfo::MergeFrom(from.userinfo());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_isrecommend()) {
      set_isrecommend(from.isrecommend());
    }
    if (from.has_at()) {
      set_at(from.at());
    }
    if (from.has_support_deep_link()) {
      set_support_deep_link(from.support_deep_link());
    }
    if (from.has_bid_server_flag()) {
      set_bid_server_flag(from.bid_server_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidReqMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReqMessage::CopyFrom(const BidReqMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReqMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->imp())) return false;
  if (has_device()) {
    if (!this->device().IsInitialized()) return false;
  }
  return true;
}

void BidReqMessage::Swap(BidReqMessage* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(requestid_, other->requestid_);
    std::swap(time_, other->time_);
    std::swap(adxid_, other->adxid_);
    imp_.Swap(&other->imp_);
    std::swap(app_, other->app_);
    std::swap(device_, other->device_);
    std::swap(userinfo_, other->userinfo_);
    bcat_.Swap(&other->bcat_);
    badv_.Swap(&other->badv_);
    std::swap(isrecommend_, other->isrecommend_);
    std::swap(at_, other->at_);
    std::swap(support_deep_link_, other->support_deep_link_);
    std::swap(bid_server_flag_, other->bid_server_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidReqMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReqMessage_descriptor_;
  metadata.reflection = BidReqMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pxene
}  // namespace com

// @@protoc_insertion_point(global_scope)
